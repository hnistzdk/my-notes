(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{477:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("strong",[t._v("Table of Contents")]),t._v(" "),a("em",[t._v("generated with "),a("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("DocToc"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%A6%82%E8%BF%B0"}},[t._v("概述")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#ribbon%E7%9A%84%E5%8A%9F%E8%83%BD-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1"}},[t._v("Ribbon的功能-负载均衡")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%A4%E7%A7%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%96%B9%E5%BC%8F"}},[t._v("两种负载均衡方式")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E9%9B%86%E4%B8%AD%E5%BC%8F"}},[t._v("集中式")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E8%BF%9B%E7%A8%8B%E5%86%85"}},[t._v("进程内")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9E%B6%E6%9E%84"}},[t._v("架构")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87"}},[t._v("环境准备")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#ribbon%E5%B8%B8%E7%94%A8%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95"}},[t._v("Ribbon常用的负载均衡算法")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E8%87%AA%E5%AE%9A%E4%B9%89ribbon%E8%A7%84%E5%88%99%E4%BD%BF%E7%94%A8"}},[t._v("自定义Ribbon规则使用")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86"}},[t._v("轮询算法原理")])])]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Ribbon是什么?")]),t._v(" "),a("p",[t._v("Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。")]),t._v(" "),a("p",[a("br"),t._v("简单的说，Ribbon是Netflx发布的开源项目，主要功能是提供"),a("strong",[t._v("客户端的软件负载均衡算法和服务调用")]),t._v("。")]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer(简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则(如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。")])]),t._v(" "),a("badge",{attrs:{text:"Ribbon目前也进入了维护模式，但仍可以使用",type:"error"}}),t._v(" "),a("h2",{attrs:{id:"ribbon的功能-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon的功能-负载均衡"}},[t._v("#")]),t._v(" Ribbon的功能-负载均衡")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("负载均衡(Load Balance)是什么？")]),t._v(" "),a("p",[t._v("简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用)。常见的负载均衡有软件Nginx，LVS，硬件F5等。")])]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("Ribbon本地负载均衡客户端VS Nginx服务端负载均衡区别")]),t._v(" "),a("p",[t._v("Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。")]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到VM本地，从而在本地实现RPC远程服务调用技术。")])]),t._v(" "),a("h3",{attrs:{id:"两种负载均衡方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种负载均衡方式"}},[t._v("#")]),t._v(" 两种负载均衡方式")]),t._v(" "),a("h4",{attrs:{id:"集中式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集中式"}},[t._v("#")]),t._v(" 集中式")]),t._v(" "),a("blockquote",[a("p",[t._v("即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5,也可以是软件，如nginx)由该设施负责把访问请求通过某种策略转发至服务的提供方;")])]),t._v(" "),a("h3",{attrs:{id:"进程内"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程内"}},[t._v("#")]),t._v(" 进程内")]),t._v(" "),a("blockquote",[a("p",[t._v("将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器\n"),a("strong",[t._v("Ribbon就属于进程内LB")]),t._v("，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。")])]),t._v(" "),a("h3",{attrs:{id:"架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[t._v("#")]),t._v(" 架构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202210261532677.png",alt:"image-20221026153243535"}})]),t._v(" "),a("blockquote",[a("p",[t._v("Ribbon在工作时分成两步\n第一步先选择EurekaServer ,它优先选择在同一个区域内负载较少的server；\n第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。")]),t._v(" "),a("p",[t._v("其中Ribbon提供了多种策略:比如轮询、随机和根据响应时间加权。")])]),t._v(" "),a("h2",{attrs:{id:"环境准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境准备"}},[t._v("#")]),t._v(" 环境准备")]),t._v(" "),a("blockquote",[a("p",[t._v("使用之前的两台Eureka+消费者80+提供者8001.8002，总共启动五个服务")])]),t._v(" "),a("blockquote",[a("p",[t._v("这里我们调用服务会发现，已经实现了负载均衡(8001,8002在被轮着调用)，但我们并没有导入Ribbon的maven坐标")]),t._v(" "),a("p",[t._v("这是因为引入")]),t._v(" "),a("div",{staticClass:"language-xml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-eureka-client"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("的时候，eureka已经帮我们整合了Ribbon了")])]),t._v(" "),a("p",[t._v("使用方式就是在注入RestTemplate时，加上"),a("code",[t._v("@LoadBalanced")]),t._v("注解")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContextConfig")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LoadBalanced")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("restTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("在我使用的cloud 2020.0.5版本中，默认的eureka-client的starter所引用的包已经剔除掉了Ribbon，取而使用的是spring-cloud-starter-loadbalancer，如果需要Ribbon作负载均衡，需要手动添加依赖")])]),t._v(" "),a("div",{staticClass:"language-xml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-ribbon"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.2.10.RELEASE"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"ribbon常用的负载均衡算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon常用的负载均衡算法"}},[t._v("#")]),t._v(" Ribbon常用的负载均衡算法")]),t._v(" "),a("blockquote",[a("p",[t._v("核心是IRule接口,Riboon使用该接口,根据特定算法从所有服务中,选择一个服务进行调用；")]),t._v(" "),a("p",[t._v("Rule接口有7个实现类,每个实现类代表一个负载均衡算法")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202210261558493.png",alt:"Ribbon的14"}})]),t._v(" "),a("ul",[a("li",[t._v("com.netflix.loadbalancer.RoundRobinRule：轮询")]),t._v(" "),a("li",[t._v("com.netflix.loadbalancer.RandomRule：随机")]),t._v(" "),a("li",[t._v("com.netflix.loadbalancer.RetryRule：先按照RoundRobinRule(轮询)策略获取服务，如果获取服务失败则在指定时间内进行重试，再次获取可用的服务")]),t._v(" "),a("li",[t._v("WeightedResponseTimeRule：对RoundRobinRule(轮询)的扩展，响应速度越快的实例选择权重越大，越容易被选中")]),t._v(" "),a("li",[t._v("BestAvailableRule：会先过滤由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务")]),t._v(" "),a("li",[t._v("AvailabilityFilteringRule：会先过滤掉故障实例，再选择并发较小的实例")]),t._v(" "),a("li",[t._v("ZoneAvoidanceRule：默认规则，复合判断server所在区域的性能和server的可用性来选择服务")])]),t._v(" "),a("h2",{attrs:{id:"自定义ribbon规则使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义ribbon规则使用"}},[t._v("#")]),t._v(" 自定义Ribbon规则使用")]),t._v(" "),a("p",[a("strong",[t._v("==这里使用eureka的那一套服务==")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202210261626008.png",alt:"Ribbon的15"}})]),t._v(" "),a("p",[a("strong",[t._v("==也就是不能放在主启动类所在的包及子包下==")])]),t._v(" "),a("p",[a("strong",[t._v("1、修改order模块")])]),t._v(" "),a("p",[a("strong",[t._v("2、额外创建一个包")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202210261627213.png",alt:"Ribbon的16"}})]),t._v(" "),a("p",[a("strong",[t._v("3、创建配置类,指定负载均衡算法")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202210261627295.png",alt:"Ribbon的17"}})]),t._v(" "),a("p",[a("strong",[t._v("4、在主启动类上加一个注解")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202210261627684.png",alt:"Ribbon的18"}})]),t._v(" "),a("p",[a("strong",[t._v("表示,访问CLOUD_pAYMENT_SERVICE的服务时,使用我们自定义的负载均衡算法")])]),t._v(" "),a("h2",{attrs:{id:"轮询算法原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#轮询算法原理"}},[t._v("#")]),t._v(" 轮询算法原理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202210261631978.png",alt:"image-20221026163144875"}})]),t._v(" "),a("p",[t._v("手写轮询省略")])],1)}),[],!1,null,null,null);a.default=e.exports}}]);