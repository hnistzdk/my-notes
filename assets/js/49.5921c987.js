(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{397:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("strong",[s._v("Table of Contents")]),s._v(" "),t("em",[s._v("generated with "),t("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[s._v("DocToc"),t("OutboundLink")],1)])]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88"}},[s._v("虚拟机栈")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E6%A6%82%E8%BF%B0"}},[s._v("虚拟机栈概述")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E6%98%AF%E4%BB%80%E4%B9%88"}},[s._v("Java虚拟机栈是什么")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"}},[s._v("生命周期")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BD%9C%E7%94%A8"}},[s._v("作用")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%A0%88%E7%9A%84%E7%89%B9%E7%82%B9"}},[s._v("栈的特点")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E5%93%AA%E4%BA%9B%E5%BC%82%E5%B8%B8"}},[s._v("开发中遇到哪些异常？")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E8%AE%BE%E7%BD%AE%E6%A0%88%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F"}},[s._v("设置栈内存大小")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%A0%88%E7%9A%84%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D"}},[s._v("栈的存储单位")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%A0%88%E4%B8%AD%E5%AD%98%E5%82%A8%E4%BB%80%E4%B9%88"}},[s._v("栈中存储什么？")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%A0%88%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86"}},[s._v("栈运行原理")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%A0%88%E5%B8%A7%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84"}},[s._v("栈帧的内部结构")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8"}},[s._v("局部变量表")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%85%B3%E4%BA%8Eslot%E7%9A%84%E7%90%86%E8%A7%A3"}},[s._v("关于Slot的理解")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#slot%E7%9A%84%E9%87%8D%E5%A4%8D%E5%88%A9%E7%94%A8"}},[s._v("Slot的重复利用")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%AF%B9%E6%AF%94"}},[s._v("静态变量与局部变量的对比")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88"}},[s._v("操作数栈")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%A6%82%E5%BF%B5"}},[s._v("概念")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BB%A3%E7%A0%81%E8%BF%BD%E8%B8%AA"}},[s._v("代码追踪")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%A0%88%E9%A1%B6%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF"}},[s._v("栈顶缓存技术")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5"}},[s._v("动态链接")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%88%86%E9%85%8D"}},[s._v("方法的调用：解析与分配")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E9%93%BE%E6%8E%A5"}},[s._v("链接")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5"}},[s._v("静态链接")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5-1"}},[s._v("动态链接")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E7%BB%91%E5%AE%9A%E6%9C%BA%E5%88%B6"}},[s._v("绑定机制")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%97%A9%E6%9C%9F%E7%BB%91%E5%AE%9A"}},[s._v("早期绑定")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%99%9A%E6%9C%9F%E7%BB%91%E5%AE%9A"}},[s._v("晚期绑定")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%97%A9%E6%99%9A%E6%9C%9F%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2"}},[s._v("早晚期绑定的发展历史")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E8%99%9A%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%9E%E8%99%9A%E6%96%B9%E6%B3%95"}},[s._v("虚方法和非虚方法")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%99%AE%E9%80%9A%E8%B0%83%E7%94%A8%E6%8C%87%E4%BB%A4"}},[s._v("普通调用指令：")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8%E6%8C%87%E4%BB%A4"}},[s._v("动态调用指令：")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#invokednamic%E6%8C%87%E4%BB%A4"}},[s._v("invokednamic指令")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80"}},[s._v("动态类型语言和静态类型语言")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E7%9A%84%E6%9C%AC%E8%B4%A8"}},[s._v("方法重写的本质")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java-%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E7%9A%84%E6%9C%AC%E8%B4%A8"}},[s._v("Java 语言中方法重写的本质：")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#illegalaccesserror%E4%BB%8B%E7%BB%8D"}},[s._v("IllegalAccessError介绍")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8%E8%99%9A%E6%96%B9%E6%B3%95%E8%A1%A8"}},[s._v("方法的调用：虚方法表")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80"}},[s._v("方法返回地址")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%80%E4%BA%9B%E9%99%84%E5%8A%A0%E4%BF%A1%E6%81%AF"}},[s._v("一些附加信息")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98"}},[s._v("相关面试题")])])])])]),s._v(" "),t("hr"),s._v(" "),t("h1",{attrs:{id:"虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈"}},[s._v("#")]),s._v(" 虚拟机栈")]),s._v(" "),t("h2",{attrs:{id:"虚拟机栈概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈概述"}},[s._v("#")]),s._v(" 虚拟机栈概述")]),s._v(" "),t("p",[s._v("由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。\n优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。")]),s._v(" "),t("p",[s._v("有不少Java开发人员一提到Java内存结构，就会非常粗粒度地将JVM中的内存区理解为仅有Java堆（heap）和Java栈（stack）？为什么？")]),s._v(" "),t("p",[s._v("首先栈是运行时的单位，而堆是存储的单位")]),s._v(" "),t("ul",[t("li",[s._v("栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。")]),s._v(" "),t("li",[s._v("堆解决的是数据存储的问题，即数据怎么放，放哪里")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705163928652.png",alt:"image-20200705163928652"}})]),s._v(" "),t("h3",{attrs:{id:"java虚拟机栈是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java虚拟机栈是什么"}},[s._v("#")]),s._v(" Java虚拟机栈是什么")]),s._v(" "),t("p",[s._v("Java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用。")]),s._v(" "),t("blockquote",[t("p",[s._v("Java虚拟机栈是线程私有的，每个线程都存在一个")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705164722033.png",alt:"image-20200705164722033"}})]),s._v(" "),t("h3",{attrs:{id:"生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[s._v("#")]),s._v(" 生命周期")]),s._v(" "),t("blockquote",[t("p",[s._v("虚拟机栈的生命周期和线程一致，也就是线程运行结束了，该虚拟机栈也销毁了")])]),s._v(" "),t("h3",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[s._v("#")]),s._v(" 作用")]),s._v(" "),t("p",[s._v("主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。")]),s._v(" "),t("blockquote",[t("p",[s._v("局部变量，它是相比于成员变量来说的（或属性）")]),s._v(" "),t("p",[s._v("基本数据类型变量 VS  引用类型变量（类、数组、接口）")])]),s._v(" "),t("h3",{attrs:{id:"栈的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈的特点"}},[s._v("#")]),s._v(" 栈的特点")]),s._v(" "),t("p",[s._v("栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器。JVM直接对Java栈的操作只有两个：")]),s._v(" "),t("ul",[t("li",[s._v("每个方法执行，伴随着进栈（入栈、压栈）")]),s._v(" "),t("li",[s._v("执行结束后的出栈工作")])]),s._v(" "),t("p",[s._v("对于栈来说不存在垃圾回收问题（不过栈存在溢出的情况）")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705165025382.png",alt:"image-20200705165025382"}})]),s._v(" "),t("h3",{attrs:{id:"开发中遇到哪些异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发中遇到哪些异常"}},[s._v("#")]),s._v(" 开发中遇到哪些异常？")]),s._v(" "),t("p",[s._v("栈中可能出现的异常")]),s._v(" "),t("p",[s._v("Java 虚拟机规范允许Java栈的大小是动态的或者是固定不变的。")]),s._v(" "),t("p",[s._v("如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个StackOverflowError 异常。")]),s._v(" "),t("p",[s._v("如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个 OutOfMemoryError 异常。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StackErrorTest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("当栈深度达到9807的时候，就出现栈内存空间不足")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20220710102033281.png",alt:"image-20220710102033281"}})]),s._v(" "),t("h3",{attrs:{id:"设置栈内存大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置栈内存大小"}},[s._v("#")]),s._v(" 设置栈内存大小")]),s._v(" "),t("p",[s._v("我们可以使用参数 -Xss选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Xss")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("m\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Xss")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("k\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"栈的存储单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈的存储单位"}},[s._v("#")]),s._v(" 栈的存储单位")]),s._v(" "),t("h3",{attrs:{id:"栈中存储什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈中存储什么"}},[s._v("#")]),s._v(" 栈中存储什么？")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("每个线程都有自己的栈，栈中的数据都是以"),t("code",[s._v("栈帧（Stack Frame）")]),s._v("的格式存在，栈中数据的基本单位就是栈帧")])]),s._v(" "),t("li",[t("p",[s._v("在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）")]),s._v(" "),t("blockquote",[t("p",[s._v("方法与栈帧是一一对应的关系，一个方法的执行就代表一个栈帧的入栈，一个方法的执行结束代表一个栈帧的出栈")])])]),s._v(" "),t("li",[t("p",[s._v("栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。")])])]),s._v(" "),t("blockquote",[t("p",[s._v("OOP的基本概念：类和对象")]),s._v(" "),t("p",[s._v("类中基本结构：field（属性、字段、域）、method")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("JVM直接对Java栈的操作只有两个，就是对栈帧的"),t("code",[s._v("压栈")]),s._v("和"),t("code",[s._v("出栈")]),s._v("，"),t("strong",[s._v('遵循"先进后出"、"后进先出"原则。')])])]),s._v(" "),t("li",[t("p",[s._v("在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为"),t("strong",[s._v("当前栈帧（Current Frame）")]),s._v("，与当前栈帧相对应的方法就是"),t("strong",[s._v("当前方法（Current Method）")]),s._v("，定义这个方法的类就是"),t("strong",[s._v("当前类（Current Class）")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("执行引擎运行的所有字节码指令只针对当前栈帧进行操作。")])]),s._v(" "),t("li",[t("p",[s._v("如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705203142545.png",alt:"image-20200705203142545"}})]),s._v(" "),t("p",[s._v("下面写一个简单的代码")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StackFrameTest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method01")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method01")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"方法1的开始"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method02")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"方法1的结束"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method02")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"方法2的开始"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method03")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"方法2的结束"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method03")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"方法3的开始"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"方法3的结束"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("输出结果为")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("方法1的开始\n方法2的开始\n方法3的开始\n方法3的结束\n方法2的结束\n方法1的结束\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("满足栈先进后出的概念，通过Idea的 DEBUG，能够看到栈信息")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705203916023.png",alt:"image-20200705203916023"}})]),s._v(" "),t("h3",{attrs:{id:"栈运行原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈运行原理"}},[s._v("#")]),s._v(" 栈运行原理")]),s._v(" "),t("blockquote",[t("p",[s._v("不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧。")]),s._v(" "),t("p",[s._v("如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。")]),s._v(" "),t("p",[s._v("Java方法有两种返回函数的方式，一种是正常的函数返回，使用return指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。")])]),s._v(" "),t("h3",{attrs:{id:"栈帧的内部结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈帧的内部结构"}},[s._v("#")]),s._v(" 栈帧的内部结构")]),s._v(" "),t("p",[s._v("每个栈帧中存储着：")]),s._v(" "),t("ul",[t("li",[s._v("局部变量表（Local Variables）")]),s._v(" "),t("li",[s._v("操作数栈（Operand Stack）（或表达式栈）")]),s._v(" "),t("li",[s._v("动态链接（Dynamic Linking）（或指向运行时常量池的方法引用）")]),s._v(" "),t("li",[s._v("方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）")]),s._v(" "),t("li",[s._v("一些附加信息")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705204836977.png",alt:"image-20200705204836977"}})]),s._v(" "),t("p",[s._v("并行每个线程下的栈都是私有的，因此每个线程都有自己各自的栈，并且每个栈里面都有很多栈帧，栈帧的大小主要由 局部变量表 和 操作数栈决定的")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705205443993.png",alt:"image-20200705205443993"}})]),s._v(" "),t("h2",{attrs:{id:"局部变量表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#局部变量表"}},[s._v("#")]),s._v(" 局部变量表")]),s._v(" "),t("p",[s._v("局部变量表：Local Variables，被称之为局部变量数组或本地变量表")]),s._v(" "),t("p",[s._v("定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型。")]),s._v(" "),t("p",[t("strong",[s._v("由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题。")])]),s._v(" "),t("p",[s._v("局部变量表所需的容量大小是在编译期确定下来的，并保存在方法的Code属性的"),t("code",[s._v("maximum local variables")]),s._v("数据项中。在方法运行期间是不会改变局部变量表的大小的。")]),s._v(" "),t("p",[s._v("方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。")]),s._v(" "),t("p",[s._v("局部变量表中的变量只在当前方法调用中有效。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。")]),s._v(" "),t("h3",{attrs:{id:"关于slot的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于slot的理解"}},[s._v("#")]),s._v(" 关于Slot的理解")]),s._v(" "),t("p",[s._v("参数值的存放总是在局部变量数组的index 0开始，到数组长度-1的索引结束。")]),s._v(" "),t("p",[s._v("局部变量表，最基本的存储单元是Slot（变量槽）局部变量表中存放编译期可知的各种基本数据类型（8种），引用类型（reference），returnAddress类型的变量。")]),s._v(" "),t("p",[s._v("在局部变量表里，32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。")]),s._v(" "),t("blockquote",[t("p",[s._v("byte、short、char 在存储前被转换为int，boolean也被转换为int，0表示false，非0表示true。\nlong和double则占据两个slot。")])]),s._v(" "),t("p",[s._v("JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值")]),s._v(" "),t("p",[s._v("当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个slot上")]),s._v(" "),t("p",[s._v("如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可。（比如：访问long或double类型变量）")]),s._v(" "),t("p",[t("code",[s._v("如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的slot处，其余的参数按照参数表顺序继续排列。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705212454445.png",alt:"image-20200705212454445"}})]),s._v(" "),t("h3",{attrs:{id:"slot的重复利用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slot的重复利用"}},[s._v("#")]),s._v(" Slot的重复利用")]),s._v(" "),t("p",[t("strong",[s._v("栈帧中的局部变量表中的槽位是可以重用的")]),s._v("，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变就很有可能会"),t("strong",[s._v("复用过期局部变量的槽位")]),s._v("，从而达到节省资源的目的。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200705213106749.png",alt:"image-20200705213106749"}})]),s._v(" "),t("h3",{attrs:{id:"静态变量与局部变量的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态变量与局部变量的对比"}},[s._v("#")]),s._v(" 静态变量与局部变量的对比")]),s._v(" "),t("p",[s._v("变量的分类：")]),s._v(" "),t("ul",[t("li",[s._v("按数据类型分：基本数据类型、引用数据类型")]),s._v(" "),t("li",[s._v("按类中声明的位置分：成员变量（类变量，实例变量）、局部变量\n"),t("ul",[t("li",[s._v("类变量：linking的prepare阶段，给类变量默认赋值，init阶段给类变量显示赋值即静态代码块")]),s._v(" "),t("li",[s._v("实例变量：随着对象创建，会在堆空间中分配实例变量空间，并进行默认赋值")]),s._v(" "),t("li",[s._v("局部变量：在使用前必须进行显式赋值，不然编译不通过。")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("参数表分配完毕之后，再根据方法体内定义的变量的顺序和作用域分配。")]),s._v(" "),t("p",[s._v('我们知道类变量表有两次初始化的机会，第一次是在"准备阶段"，执行系统初始化，对类变量设置零值，另一次则是在"初始化"阶段，赋予程序员在代码中定义的初始值。')]),s._v(" "),t("p",[s._v("和类变量初始化不同的是，局部变量表不存在系统初始化的过程，这意味着一旦定义了局部变量则必须人为的初始化，否则无法使用。")]),s._v(" "),t("p",[s._v("在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。")])]),s._v(" "),t("p",[t("code",[s._v("局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。")])]),s._v(" "),t("h2",{attrs:{id:"操作数栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作数栈"}},[s._v("#")]),s._v(" 操作数栈")]),s._v(" "),t("h3",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),t("p",[s._v("操作数栈：Operand Stack")]),s._v(" "),t("p",[s._v("每一个独立的栈帧除了包含局部变量表以外，还包含一个后进先出（Last-In First-Out）的 "),t("strong",[s._v("操作数栈")]),s._v("，也可以称之为 "),t("strong",[s._v("表达式栈")]),s._v("（Expression Stack）")]),s._v(" "),t("p",[t("code",[s._v("操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈（push）和 出栈（pop）")])]),s._v(" "),t("ul",[t("li",[s._v("某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈")]),s._v(" "),t("li",[s._v("比如：执行复制、交换、求和等操作")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706090618332.png",alt:"image-20200706090618332"}})]),s._v(" "),t("p",[s._v("代码举例")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706090833697.png",alt:"image-20200706090833697"}})]),s._v(" "),t("ul",[t("li",[t("p",[s._v("操作数栈，"),t("strong",[s._v("主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。")])])]),s._v(" "),t("li",[t("p",[s._v("操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，"),t("code",[s._v("此时这个方法的操作数栈是空的")]),s._v("。")])])]),s._v(" "),t("blockquote",[t("p",[s._v("这个时候数组是有长度的，因为数组一旦创建，那么就是不可变的")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度"),t("code",[s._v("在编译期就定义好了")]),s._v("，保存在方法的Code属性中，为maxstack的值。")])]),s._v(" "),t("li",[t("p",[s._v("栈中的任何一个元素都是可以任意的Java数据类型")])]),s._v(" "),t("li",[t("p",[s._v("32bit的类型(int,boolean,引用类型)占用一个栈单位深度")])]),s._v(" "),t("li",[t("p",[s._v("64bit的类型(long,double)占用两个栈单位深度")])]),s._v(" "),t("li",[t("p",[s._v("操作数栈"),t("strong",[s._v("并非采用访问索引的方式来进行数据访问")]),s._v("的，而是只能通过标准的入栈(push)和出栈(pop)操作来完成一次数据访问")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中")]),s._v("，并更新PC寄存器中下一条需要执行的字节码指令。")])]),s._v(" "),t("li",[t("p",[s._v("操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。")])]),s._v(" "),t("li",[t("p",[s._v("另外，我们说Java虚拟机的"),t("code",[s._v("解释引擎是基于栈的执行引擎")]),s._v("，其中的栈指的就是操作数栈。")])])]),s._v(" "),t("h3",{attrs:{id:"代码追踪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码追踪"}},[s._v("#")]),s._v(" 代码追踪")]),s._v(" "),t("p",[s._v("我们给定代码")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testAddOperation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("使用javap 命令反编译class文件： javap -v 类名.class")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706092610730.png",alt:"image-20200706092610730"}})]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("byte、short、char、boolean 内部都是使用int型来进行保存的")])]),s._v(" "),t("p",[s._v("从上面的代码我们可以知道，我们都是通过bipush对操作数 15 和  8进行入栈操作")]),s._v(" "),t("p",[s._v("同时使用的是 iadd方法进行相加操作，i -> 代表的就是 int，也就是int类型的加法操作")])]),s._v(" "),t("p",[s._v("执行流程如下所示：")]),s._v(" "),t("p",[s._v("首先执行第一条语句，PC寄存器指向的是0，也就是指令地址为0，然后使用bipush让操作数15入栈。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706093131621.png",alt:"image-20200706093131621"}})]),s._v(" "),t("p",[s._v("执行完后，让PC + 1，指向下一行代码，下一行代码就是将操作数栈的元素存储到局部变量表1的位置，我们可以看到局部变量表的已经增加了一个元素")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706093251302.png",alt:"image-20200706093251302"}})]),s._v(" "),t("blockquote",[t("p",[s._v("为什么局部变量表不是从0开始的呢？")]),s._v(" "),t("p",[s._v("其实局部变量表也是从0开始的，但是因为0号位置存储的是this指针，所以说就直接省略了")])]),s._v(" "),t("p",[s._v("然后PC+1，指向的是下一行。让操作数8也入栈，同时执行store操作，存入局部变量表中")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706093646406.png",alt:"image-20200706093646406"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706093751711.png",alt:"image-20200706093751711"}})]),s._v(" "),t("p",[s._v("然后从局部变量表中，依次将数据放在操作数栈中")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706093859191.png",alt:"image-20200706093859191"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706093921573.png",alt:"image-20200706093921573"}})]),s._v(" "),t("p",[s._v("然后将操作数栈中的两个元素执行相加操作，并存储在局部变量表3的位置")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706094046782.png",alt:"image-20200706094046782"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706094109629.png",alt:"image-20200706094109629"}})]),s._v(" "),t("p",[s._v("最后PC寄存器的位置指向10，也就是return方法，则直接退出方法")]),s._v(" "),t("h2",{attrs:{id:"栈顶缓存技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈顶缓存技术"}},[s._v("#")]),s._v(" 栈顶缓存技术")]),s._v(" "),t("p",[s._v("栈顶缓存技术：Top Of Stack Cashing")]),s._v(" "),t("p",[s._v("前面提过，基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读/写次数。")]),s._v(" "),t("p",[s._v("由于操作数是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM的设计者们提出了"),t("code",[s._v("栈顶缓存（Tos，Top-of-Stack Cashing）技术")]),s._v("，"),t("strong",[s._v("将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("寄存器：指令更少，执行速度快")])]),s._v(" "),t("h2",{attrs:{id:"动态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态链接"}},[s._v("#")]),s._v(" 动态链接")]),s._v(" "),t("blockquote",[t("p",[s._v("动态链接：Dynamic Linking，或者叫，"),t("strong",[s._v("指向运行时常量池的方法引用")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706100311886.png",alt:"image-20200706100311886"}})]),s._v(" "),t("blockquote",[t("p",[s._v("动态链接、方法返回地址、附加信息 ： 有些地方被称为帧数据区")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("每一个栈帧内部都包含一个指向"),t("strong",[s._v("运行时常量池")]),s._v("中该栈帧所属方法的引用包含这个引用的目的就是为了支持当前方法的代码能够实现·动态链接"),t("code",[s._v("（Dynamic Linking）")]),s._v("。比如：invokedynamic指令")])]),s._v(" "),t("li",[t("p",[s._v("在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为"),t("code",[s._v("符号引用（symbolic Reference）")]),s._v("保存在class文件的常量池里。")]),s._v(" "),t("p",[s._v("比如：描述一个方法调用了另外的其他方法时，就是通过"),t("code",[s._v("常量池中指向方法的符号引用")]),s._v("来表示的，那么"),t("strong",[s._v("动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用")]),s._v("。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706101251847.png",alt:"image-20200706101251847"}})]),s._v(" "),t("blockquote",[t("p",[s._v("为什么需要运行时常量池？")]),s._v(" "),t("p",[s._v("因为在不同的方法，都可能调用常量或者方法，所以只需要存储一份即可，节省了空间")]),s._v(" "),t("p",[s._v("常量池的作用：就是为了提供一些符号和常量，便于指令的识别")])]),s._v(" "),t("h2",{attrs:{id:"方法的调用-解析与分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法的调用-解析与分配"}},[s._v("#")]),s._v(" 方法的调用：解析与分配")]),s._v(" "),t("blockquote",[t("p",[s._v("在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关")])]),s._v(" "),t("h3",{attrs:{id:"链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[s._v("#")]),s._v(" 链接")]),s._v(" "),t("h4",{attrs:{id:"静态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态链接"}},[s._v("#")]),s._v(" 静态链接")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("当一个字节码文件被装载进JVM内部时，如果被调用的"),t("code",[s._v("目标方法在编译期可知")]),s._v("，且运行期保持不变时，这种情况下降调用方法的符号引用转换为直接引用的过程称之为静态链接")])]),s._v(" "),t("h4",{attrs:{id:"动态链接-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态链接-2"}},[s._v("#")]),s._v(" 动态链接")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("如果"),t("code",[s._v("被调用的方法在编译期无法被确定下来")]),s._v("，也就是说，只能够在程序运行期间将调用的方法的符号转换为直接引用，由于这种引用转换过程具备动态性，因此也被称之为动态链接。")])]),s._v(" "),t("h3",{attrs:{id:"绑定机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绑定机制"}},[s._v("#")]),s._v(" 绑定机制")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。"),t("strong",[s._v("绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。")])])]),s._v(" "),t("h4",{attrs:{id:"早期绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#早期绑定"}},[s._v("#")]),s._v(" 早期绑定")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("早期绑定就是指被调用的"),t("strong",[s._v("目标方法如果在编译期可知，且运行期保持不变")]),s._v("时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。")])]),s._v(" "),t("h4",{attrs:{id:"晚期绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#晚期绑定"}},[s._v("#")]),s._v(" 晚期绑定")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("如果"),t("strong",[s._v("被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法")]),s._v("，这种绑定方式也就被称之为晚期绑定。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Huntable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hunt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"动物可以吃东西"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Huntable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//早期绑定")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//早期绑定")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这里就是早期绑定,因为调用编译期可知")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"猫吃鱼"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hunt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"猫可以捕猎老鼠"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BindTest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("showHunt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Huntable")]),s._v(" huntable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        huntable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hunt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//晚期绑定")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("showEat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" animal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        animal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//晚期绑定")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n注释一下晚期绑定的含义：\n这里的BindTest类中的两个方法的参数是一个Animal接口，在方法中调用了Animal接口的eat()方法，而在编译的时候是不知道调用的哪一个实现类所实现的方法的，所以这里是属于晚期绑定\n*/")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"早晚期绑定的发展历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#早晚期绑定的发展历史"}},[s._v("#")]),s._v(" 早晚期绑定的发展历史")]),s._v(" "),t("p",[s._v("随着高级语言的横空出世，类似于Java一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然"),t("code",[s._v("这一类的编程语言具备多态特性，那么自然也就具备早期绑定和晚期绑定两种绑定方式")]),s._v("。")]),s._v(" "),t("p",[s._v("Java中任何一个普通的方法其实都具备虚函数的特征，它们相当于C++语言中的虚函数（C++中则需要使用关键字virtual来显式定义）。如果在Java程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字final来标记这个方法。"),t("strong",[s._v("因为使用final修饰的方法就不能再被重写了，在编译期就确定了，所以不再具备虚函数的特征")])]),s._v(" "),t("h3",{attrs:{id:"虚方法和非虚方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚方法和非虚方法"}},[s._v("#")]),s._v(" 虚方法和非虚方法")]),s._v(" "),t("ul",[t("li",[s._v("如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法。")]),s._v(" "),t("li",[s._v("静态方法、私有方法、final方法、实例构造器(前四种都是无法重写的方法)、父类方法(是确定的方法)都是非虚方法。")]),s._v(" "),t("li",[s._v("其他方法称为虚方法。")])]),s._v(" "),t("blockquote",[t("p",[s._v("子类对象的多态的使用前提")]),s._v(" "),t("ul",[t("li",[s._v("类的继承关系")]),s._v(" "),t("li",[s._v("方法的重写")])])]),s._v(" "),t("p",[s._v("虚拟机中提供了以下几条方法调用指令：")]),s._v(" "),t("h4",{attrs:{id:"普通调用指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通调用指令"}},[s._v("#")]),s._v(" 普通调用指令：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("invokestatic：调用静态方法，解析阶段确定唯一方法版本")])]),s._v(" "),t("li",[t("code",[s._v("invokespecial：调用< init>方法、私有及父类方法，解析阶段确定唯一方法版本")])]),s._v(" "),t("li",[s._v("invokevirtual：调用所有虚方法")]),s._v(" "),t("li",[s._v("invokeinterface：调用接口方法")])]),s._v(" "),t("h4",{attrs:{id:"动态调用指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态调用指令"}},[s._v("#")]),s._v(" 动态调用指令：")]),s._v(" "),t("ul",[t("li",[s._v("invokedynamic：动态解析出需要调用的方法，然后执行")])]),s._v(" "),t("blockquote",[t("p",[s._v("前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本。其中invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法。")])]),s._v(" "),t("h3",{attrs:{id:"invokednamic指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#invokednamic指令"}},[s._v("#")]),s._v(" invokednamic指令")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("JVM字节码指令集一直比较稳定，一直到Java7中才增加了一个invokedynamic指令，这是"),t("code",[s._v("Java为了实现动态类型语言支持而做的一种改进")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("但是在Java7中并没有提供直接生成invokedynamic指令的方法，需要借助ASM这种底层字节码工具来产生invokedynamic指令。"),t("code",[s._v("直到Java8的Lambda表达式的出现，invokedynamic指令的生成，在Java中才有了直接的生成方式")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("Java7中增加的动态语言类型支持的本质是对Java虚拟机规范的修改，而不是对Java语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在Java平台的动态语言的编译器。")])])]),s._v(" "),t("h4",{attrs:{id:"动态类型语言和静态类型语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态类型语言和静态类型语言"}},[s._v("#")]),s._v(" 动态类型语言和静态类型语言")]),s._v(" "),t("blockquote",[t("p",[s._v("动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之是动态类型语言。")]),s._v(" "),t("p",[s._v("说的再直白一点就是，"),t("strong",[s._v("静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息")]),s._v("，这是动态语言的一个重要特征。")])]),s._v(" "),t("blockquote",[t("p",[s._v('Java：String info = "test";     (Java是静态类型语言的，会先编译就进行类型检查)')]),s._v(" "),t("p",[s._v('JS：var name = "test";    var name = 10;    （运行时才进行检查）')])]),s._v(" "),t("h3",{attrs:{id:"方法重写的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法重写的本质"}},[s._v("#")]),s._v(" 方法重写的本质")]),s._v(" "),t("h4",{attrs:{id:"java-语言中方法重写的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-语言中方法重写的本质"}},[s._v("#")]),s._v(" Java 语言中方法重写的本质：")]),s._v(" "),t("ol",[t("li",[s._v("找到操作数栈顶的第一个元素所执行的对象的实际类型，记作C。")]),s._v(" "),t("li",[s._v("如果在类型C中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError 异常。")]),s._v(" "),t("li",[s._v("否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。")]),s._v(" "),t("li",[s._v("如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。")])]),s._v(" "),t("h4",{attrs:{id:"illegalaccesserror介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#illegalaccesserror介绍"}},[s._v("#")]),s._v(" IllegalAccessError介绍")]),s._v(" "),t("blockquote",[t("p",[s._v("程序试图访问或修改一个属性或调用一个方法，这个属性或方法，没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在运行时，就说明一个类发生了不兼容的改变。")])]),s._v(" "),t("h3",{attrs:{id:"方法的调用-虚方法表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法的调用-虚方法表"}},[s._v("#")]),s._v(" 方法的调用：虚方法表")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，"),t("code",[s._v("为了提高性能")]),s._v("，JVM采用在类的方法区建立一个"),t("strong",[s._v("虚方法表（virtual method table）（非虚方法不会出现在表中），使用索引表来代替查找")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("每个类中都有一个虚方法表，表中存放着各个方法的实际入口。")])]),s._v(" "),t("li",[t("p",[s._v("虚方法表是什么时候被创建的呢？")]),s._v(" "),t("p",[s._v("虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706144954070.png",alt:"image-20200706144954070"}})]),s._v(" "),t("p",[s._v("如上图所示：如果类中重写了方法，那么调用的时候，就会直接在虚方法表中查找，否则将会直接连接到Object的方法中。")]),s._v(" "),t("h2",{attrs:{id:"方法返回地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法返回地址"}},[s._v("#")]),s._v(" 方法返回地址")]),s._v(" "),t("blockquote",[t("p",[s._v("方法返回地址用来存放调用该方法的PC寄存器的值")])]),s._v(" "),t("p",[s._v("一个方法的结束，有两种方式：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("正常执行完成")])]),s._v(" "),t("li",[t("p",[s._v("出现未处理的异常，非正常退出")])])]),s._v(" "),t("blockquote",[t("p",[s._v("无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的PC计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。")])]),s._v(" "),t("p",[s._v("当一个方法开始执行后，只有两种方式可以退出这个方法：")]),s._v(" "),t("p",[s._v("执行引擎遇到任意一个方法返回的字节码指令（return），会有返回值传递给上层的方法调用者，简称正常完成出口；")]),s._v(" "),t("ul",[t("li",[s._v("一个方法在正常调用完成之后，究竟需要使用哪一个返回指令，还需要根据方法返回值的实际数据类型而定。")]),s._v(" "),t("li",[s._v("在字节码指令中，返回指令包含ireturn（当返回值是boolean，byte，char，short和int类型时使用），lreturn（Long类型），freturn（Float类型），dreturn（Double类型），areturn。另外还有一个return指令声明为void的方法，实例初始化方法，类和接口的初始化方法使用。")])]),s._v(" "),t("blockquote",[t("p",[s._v("在方法执行过程中遇到异常（Exception），并且这个异常没有在方法内进行处理，也就是说，"),t("code",[s._v("只要在本方法的异常表中没有搜索到匹配的异常处理器")]),s._v("，就会导致方法退出，简称异常完成出口。")]),s._v(" "),t("p",[s._v("方法执行过程中，抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码。")])]),s._v(" "),t("p",[s._v("举例含义是：如果在4~16(用4-16去字节码中找可找到.java文件的代码行数)出现的异常，就在19去处理(同样也可找到对应的代码行数)，这样的话和整个try,catch代码块是对应的")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706154554604.png",alt:"image-20200706154554604"}})]),s._v(" "),t("blockquote",[t("p",[s._v("本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。")])]),s._v(" "),t("p",[t("strong",[s._v("正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的方法，不会给它的上层调用者产生任何的返回值。")])]),s._v(" "),t("h2",{attrs:{id:"一些附加信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一些附加信息"}},[s._v("#")]),s._v(" 一些附加信息")]),s._v(" "),t("p",[s._v("栈帧中还允许携带与Java虚拟机实现相关的一些附加信息。例如：对程序调试提供支持的信息。")]),s._v(" "),t("h2",{attrs:{id:"相关面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关面试题"}},[s._v("#")]),s._v(" 相关面试题")]),s._v(" "),t("ul",[t("li",[s._v("举例栈溢出的情况？（StackOverflowError）\n"),t("ul",[t("li",[s._v("可以通过 -Xss参数 设置栈的大小")])])]),s._v(" "),t("li",[s._v("调整栈大小，就能保证不出现溢出么？\n"),t("ul",[t("li",[s._v("不能保证不溢出")]),s._v(" "),t("li",[s._v("只是会让出现溢出的情况延后")])])]),s._v(" "),t("li",[s._v("分配的栈内存越大越好么？\n"),t("ul",[t("li",[s._v("不是，一定时间内降低了OOM概率，但是会挤占其它的线程空间，因为整个空间是有限的。")])])]),s._v(" "),t("li",[s._v("垃圾回收是否涉及到虚拟机栈？\n"),t("ul",[t("li",[s._v("不会")])])]),s._v(" "),t("li",[s._v("方法中定义的局部变量是否线程安全？\n"),t("ul",[t("li",[s._v("具体问题具体分析")])])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 面试题\n * 方法中定义局部变量是否线程安全？具体情况具体分析\n * 何为线程安全？\n *    如果只有一个线程才可以操作此数据，则必是线程安全的\n *    如果有多个线程操作，则此数据是共享数据，如果不考虑共享机制，则为线程不安全\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilderTest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 变量s1的声明方式是线程安全的")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method01")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程内部创建的，属于局部变量")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这个也是线程不安全的，因为有返回值，有可能被其它的程序所调用")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method04")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),s._v(" stringBuilder "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// stringBuilder 是线程不安全的，操作的是共享数据")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method02")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),s._v(" stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 同时并发的执行，会出现线程不安全的问题\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method03")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),s._v(" stringBuilder "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method02")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("stringBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// StringBuilder是线程安全的(对于变量s1来说)，但是返回的String也可能线程不安全的")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method05")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br")])]),t("p",[s._v("总结一句话就是：如果对象是在内部产生，并在内部消亡，没有返回到外部，那么它就是线程安全的，反之则是线程不安全的。")]),s._v(" "),t("p",[s._v("运行时数据区，是否存在Error和GC？")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("运行时数据区")]),s._v(" "),t("th",[s._v("是否存在Error")]),s._v(" "),t("th",[s._v("是否存在GC")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("程序计数器")]),s._v(" "),t("td",[s._v("否")]),s._v(" "),t("td",[s._v("否")])]),s._v(" "),t("tr",[t("td",[s._v("虚拟机栈")]),s._v(" "),t("td",[s._v("是")]),s._v(" "),t("td",[s._v("否")])]),s._v(" "),t("tr",[t("td",[s._v("本地方法栈")]),s._v(" "),t("td",[s._v("是")]),s._v(" "),t("td",[s._v("否")])]),s._v(" "),t("tr",[t("td",[s._v("方法区")]),s._v(" "),t("td",[s._v("是（OOM）")]),s._v(" "),t("td",[s._v("是")])]),s._v(" "),t("tr",[t("td",[s._v("堆")]),s._v(" "),t("td",[s._v("是")]),s._v(" "),t("td",[s._v("是")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);