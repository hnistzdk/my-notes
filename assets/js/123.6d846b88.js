(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{469:function(e,r,t){"use strict";t.r(r);var o=t(1),n=Object(o.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[r("strong",[e._v("Table of Contents")]),e._v(" "),r("em",[e._v("generated with "),r("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[e._v("DocToc"),r("OutboundLink")],1)])]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#1-dubbo%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B"}},[e._v("1. dubbo请求处理流程")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#11-consumer%E7%AB%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B"}},[e._v("1.1. consumer端处理流程")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#12-provider%E7%AB%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B"}},[e._v("1.2. provider端处理流程")])])])])]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"_1-dubbo请求处理流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-dubbo请求处理流程"}},[e._v("#")]),e._v(" 1. dubbo请求处理流程")]),e._v(" "),r("p",[e._v("dubbo是个rpc框架，本质就是socket通信，把客户端的请求信息进行编码为二进制，然后通过socket发送数据。服务端接收二进制数据，解码，进行业务逻辑处理。过程涉及较多，记录如下。")]),e._v(" "),r("h3",{attrs:{id:"_1-1-consumer端处理流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-consumer端处理流程"}},[e._v("#")]),e._v(" 1.1. consumer端处理流程")]),e._v(" "),r("ol",[r("li",[e._v("远程调用入口是InvokerInvocationHandler")]),e._v(" "),r("li",[e._v("根据调用的methodName，从注册表RegistryDirectory.methodInvokerMap缓存获取Invoker集合(服务方)。这些Invoker集合是consumer启动或服务端服务有变动，监听zk节点生成的。")]),e._v(" "),r("li",[e._v("使用路由进行过滤，获取过滤后的Invoker集合。默认是路由是MockInvokersSelector，TagRouter")]),e._v(" "),r("li",[e._v("使用负载均衡策略，从上步中的Invoker集合选取一个Invoker，后续就会请求这个具体的服务方")]),e._v(" "),r("li",[e._v("consumer端filter chain执行。通常dubbo默认[ConsumerContextFilter，FutureFilter，MonitorFilter]。如果是泛化调用filter chain[ConsumerContextFilter，FutureFilter，MonitorFilter，GenericImplFilter]。filter chain作用是在请求前做一些公共处理，通常我们工作中最经常扩展这个")]),e._v(" "),r("li",[e._v("Invoker执行调用。执行的是DubboInvoker.invoker()，该Invoker封装了NettyClient，可以进行网络通信")]),e._v(" "),r("li",[e._v("netty调用，进行网络编码，然后发送数据")]),e._v(" "),r("li",[e._v("使用Future模式进行同步等待，直至获取响应数据或超时")]),e._v(" "),r("li",[e._v("DefaultFuture阻塞等待provider响应结果")]),e._v(" "),r("li",[e._v("netty遍历selectionkey，read事件，进行解码，接着使用NettyClientHandler读取接收数据")]),e._v(" "),r("li",[e._v("使用HeartbeatHandler进行接收处理数据，封装Response为ChannelEventRunnable，交由dubbo线程池异步处理。注意：HeartbeatHandler是网络发送和接收的入口")]),e._v(" "),r("li",[e._v("ChannelEventRunnable处理接收事件，根据Response里面的唯一id获取DefaultFuture，把响应数据Response保存到DefaultFuture，同时唤醒DefaultFuture。即唤醒第8步。")]),e._v(" "),r("li",[e._v("DefaultFuture阻塞被唤醒，获取到响应结果（响应结果在第12步已经被保存到DefaultFuture），返回业务数据，至此结束。")])]),e._v(" "),r("h3",{attrs:{id:"_1-2-provider端处理流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-provider端处理流程"}},[e._v("#")]),e._v(" 1.2. provider端处理流程")]),e._v(" "),r("ol",[r("li",[e._v("nettyServer接收consumer端请求数据，进行解码")]),e._v(" "),r("li",[e._v("dubbo层数据接入入口是HeartbeatHandler，封装请求信息为ChannelEventRunnable，使用dubbo线程池异步处理")]),e._v(" "),r("li",[e._v("ChannelEventRunnable处理Request，根据请求数据内的group+interfaceName+version+port从缓存DubbotProtocol.exporterMap获取服务暴露对象DubboExporter，继而获取provider端Invoker对象")]),e._v(" "),r("li",[e._v("Invoker执行，先经过filte chain，然后最终调用目标服务执行业务逻辑")]),e._v(" "),r("li",[e._v("把业务执行结果封装为Response，使用netty进行网络通信返回数据。")])])])}),[],!1,null,null,null);r.default=n.exports}}]);