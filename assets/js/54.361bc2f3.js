(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{402:function(t,a,v){"use strict";v.r(a);var _=v(1),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("strong",[t._v("Table of Contents")]),t._v(" "),a("em",[t._v("generated with "),a("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("DocToc"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D"}},[t._v("对象实例化内存布局与访问定位")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96"}},[t._v("对象实例化")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E9%9D%A2%E8%AF%95%E9%A2%98"}},[t._v("面试题")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F"}},[t._v("对象创建方式")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AD%A5%E9%AA%A4"}},[t._v("创建对象的步骤")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B1%BB%E6%98%AF%E5%90%A6%E5%8A%A0%E8%BD%BD%E9%93%BE%E6%8E%A5%E5%88%9D%E5%A7%8B%E5%8C%96"}},[t._v("判断对象对应的类是否加载、链接、初始化")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%BA%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98"}},[t._v("为对象分配内存")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%A4%84%E7%90%86%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98"}},[t._v("处理并发问题")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%86%E9%85%8D%E5%88%B0%E7%9A%84%E5%86%85%E5%AD%98"}},[t._v("初始化分配到的内存")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E8%AE%BE%E7%BD%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%A4%B4"}},[t._v("设置对象的对象头")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%89%A7%E8%A1%8Cinit%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96"}},[t._v("执行init方法进行初始化")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%9A%84%E8%BF%87%E7%A8%8B"}},[t._v("对象实例化的过程")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80"}},[t._v("对象内存布局")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%A4%B4"}},[t._v("对象头")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%85%83%E6%95%B0%E6%8D%AE"}},[t._v("运行时元数据")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%B1%BB%E5%9E%8B%E6%8C%87%E9%92%88"}},[t._v("类型指针")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AE%9E%E4%BE%8B%E6%95%B0%E6%8D%AEinstance-data"}},[t._v("实例数据（Instance Data）")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E8%AF%B4%E6%98%8E"}},[t._v("说明")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E8%A7%84%E5%88%99"}},[t._v("规则")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E9%BD%90%E5%A1%AB%E5%85%85padding"}},[t._v("对齐填充(Padding)")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%B0%8F%E7%BB%93"}},[t._v("小结")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D"}},[t._v("对象的访问定位")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%9B%BE%E7%A4%BA"}},[t._v("图示")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F"}},[t._v("对象访问的两种方式")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE"}},[t._v("句柄访问")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88hotspot%E9%87%87%E7%94%A8"}},[t._v("直接指针（HotSpot采用）")])])])])])])])])]),t._v(" "),a("hr"),t._v(" "),a("h1",{attrs:{id:"对象实例化内存布局与访问定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象实例化内存布局与访问定位"}},[t._v("#")]),t._v(" 对象实例化内存布局与访问定位")]),t._v(" "),a("h2",{attrs:{id:"对象实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象实例化"}},[t._v("#")]),t._v(" 对象实例化")]),t._v(" "),a("h3",{attrs:{id:"面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),a("ul",[a("li",[t._v("对象在JVM中是怎么存储的？")]),t._v(" "),a("li",[t._v("对象头信息里面有哪些东西？")]),t._v(" "),a("li",[t._v("Java对象头有什么？")])]),t._v(" "),a("p",[t._v("从对象创建的"),a("strong",[t._v("方式")]),t._v("和"),a("strong",[t._v("步骤")]),t._v("开始说起")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208071704109.png",alt:"image-20200709095356247"}})]),t._v(" "),a("h3",{attrs:{id:"对象创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象创建方式"}},[t._v("#")]),t._v(" 对象创建方式")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("对象创建方式")]),t._v(" "),a("ul",[a("li",[t._v("new：最常见的方式，单例类中调用getInstance的静态类方法，XXXFactory的静态方法")]),t._v(" "),a("li",[t._v("Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器")]),t._v(" "),a("li",[t._v("Constructor的newInstance(XXX)：反射的方式，可以调用空参的，或者带参的构造器")]),t._v(" "),a("li",[t._v("使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口中的clone()方法")]),t._v(" "),a("li",[t._v("使用反序列化：反序列化，从文件、网络中获取一个对象的二进制流，一般用于Socket的网络传输")]),t._v(" "),a("li",[t._v("第三方库 Objenesis")])])]),t._v(" "),a("h3",{attrs:{id:"创建对象的步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的步骤"}},[t._v("#")]),t._v(" 创建对象的步骤")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208071717745.png",alt:"image-20220807171737678"}})]),t._v(" "),a("h4",{attrs:{id:"判断对象对应的类是否加载、链接、初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断对象对应的类是否加载、链接、初始化"}},[t._v("#")]),t._v(" 判断对象对应的类是否加载、链接、初始化")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("虚拟机遇到一条new指令")]),t._v(" "),a("ol",[a("li",[t._v("首先去检查这个指令的参数能否在"),a("strong",[t._v("Metaspace")]),t._v("的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化。（即判断类元信息是否存在）。")]),t._v(" "),a("li",[t._v("如果没有，那么在双亲委派模式下，使用当前类加载器以"),a("strong",[t._v("ClassLoader")]),t._v(" + 包名 + 类名为key进行查找对应的 "),a("code",[t._v(".class")]),t._v("文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class对象。")])])]),t._v(" "),a("h4",{attrs:{id:"为对象分配内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为对象分配内存"}},[t._v("#")]),t._v(" 为对象分配内存")]),t._v(" "),a("blockquote",[a("p",[t._v("首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果内存规整：指针碰撞")])]),t._v(" "),a("li",[a("p",[t._v("如果内存不规整")]),t._v(" "),a("ul",[a("li",[t._v("虚拟表需要维护一个列表")]),t._v(" "),a("li",[t._v("空闲列表分配")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。")]),t._v(" "),a("p",[t._v("意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial ，ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带Compact（整理）过程的收集器时，使用指针碰撞。")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。")]),t._v(" "),a("p",[t._v("意思是虚拟机"),a("code",[t._v("维护了一个列表，记录上那些内存块是可用的")]),t._v('，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为了 "空闲列表（Free List）"')])]),t._v(" "),a("p",[t._v("选择哪种分配方式由"),a("strong",[t._v("Java堆是否规整")]),t._v("所决定，而Java堆是否规整又"),a("strong",[t._v("由所采用的垃圾收集器是否带有压缩整理功能决定")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"处理并发问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理并发问题"}},[t._v("#")]),t._v(" 处理并发问题")]),t._v(" "),a("ul",[a("li",[t._v("采用CAS配上失败重试保证更新的原子性")]),t._v(" "),a("li",[t._v("每个线程预先分配TLAB——通过设置 "),a("code",[t._v("-XX:+UseTLAB")]),t._v(" 参数来设置（区域加锁机制）\n"),a("ul",[a("li",[t._v("在Eden区给每个线程分配一块区域")])])])]),t._v(" "),a("h3",{attrs:{id:"初始化分配到的内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化分配到的内存"}},[t._v("#")]),t._v(" 初始化分配到的内存")]),t._v(" "),a("p",[t._v("给对象属性赋值的操作有：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("属性的默认初始化")])]),t._v(" "),a("li",[a("p",[t._v("显式初始化")])]),t._v(" "),a("li",[a("p",[t._v("代码块中的初始化")])]),t._v(" "),a("li",[a("p",[t._v("构造器初始化")])]),t._v(" "),a("li",[a("p",[t._v("所有属性设置默认值，保证对象实例字段在不赋值可以直接使用")])])]),t._v(" "),a("h3",{attrs:{id:"设置对象的对象头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置对象的对象头"}},[t._v("#")]),t._v(" 设置对象的对象头")]),t._v(" "),a("p",[t._v("将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。")]),t._v(" "),a("h3",{attrs:{id:"执行init方法进行初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行init方法进行初始化"}},[t._v("#")]),t._v(" 执行init方法进行初始化")]),t._v(" "),a("p",[t._v("在Java程序的视角看来，初始化才正式开始。")]),t._v(" "),a("blockquote",[a("p",[t._v("初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量")])]),t._v(" "),a("p",[t._v("因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。")]),t._v(" "),a("h3",{attrs:{id:"对象实例化的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象实例化的过程"}},[t._v("#")]),t._v(" 对象实例化的过程")]),t._v(" "),a("ul",[a("li",[t._v("加载类元信息")]),t._v(" "),a("li",[t._v("为对象分配内存")]),t._v(" "),a("li",[t._v("处理并发问题")]),t._v(" "),a("li",[t._v("属性的默认初始化（零值初始化）")]),t._v(" "),a("li",[t._v("设置对象头信息")]),t._v(" "),a("li",[t._v("属性的显示初始化、代码块中初始化、构造器中初始化")])]),t._v(" "),a("h2",{attrs:{id:"对象内存布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象内存布局"}},[t._v("#")]),t._v(" 对象内存布局")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208071704420.png",alt:"image-20200709151033237"}})]),t._v(" "),a("h3",{attrs:{id:"对象头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象头"}},[t._v("#")]),t._v(" 对象头")]),t._v(" "),a("p",[t._v("对象头包含了两部分，分别是 **运行时元数据（Mark Word）**和 "),a("strong",[t._v("类型指针")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果是数组，还需要记录数组的长度")])]),t._v(" "),a("h4",{attrs:{id:"运行时元数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时元数据"}},[t._v("#")]),t._v(" 运行时元数据")]),t._v(" "),a("ul",[a("li",[t._v("哈希值（HashCode）")]),t._v(" "),a("li",[t._v("GC分代年龄")]),t._v(" "),a("li",[t._v("锁状态标志")]),t._v(" "),a("li",[t._v("线程持有的锁")]),t._v(" "),a("li",[t._v("偏向线程ID")]),t._v(" "),a("li",[t._v("偏向时间戳")])]),t._v(" "),a("h4",{attrs:{id:"类型指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型指针"}},[t._v("#")]),t._v(" 类型指针")]),t._v(" "),a("blockquote",[a("p",[t._v("指向类元数据"),a("code",[t._v("InstanceClass")]),t._v("，"),a("strong",[t._v("确定该对象所属的类型")]),t._v("。指向的其实是"),a("strong",[t._v("方法区中存放的类元信息")])])]),t._v(" "),a("h3",{attrs:{id:"实例数据-instance-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例数据-instance-data"}},[t._v("#")]),t._v(" 实例数据（Instance Data）")]),t._v(" "),a("h4",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[t._v("#")]),t._v(" 说明")]),t._v(" "),a("blockquote",[a("p",[t._v("它是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段("),a("code",[t._v("包括从父类集成下来的和本身拥有的字段")]),t._v(")")])]),t._v(" "),a("h4",{attrs:{id:"规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[t._v("#")]),t._v(" 规则")]),t._v(" "),a("ul",[a("li",[t._v("相同宽度的字段总是被分配在一起")]),t._v(" "),a("li",[t._v("父类中定义的变量会出现在子类之前")]),t._v(" "),a("li",[t._v("如果CompactFields参数为true(默认为true)：子类的窄变量可能插入到父类变量的空隙之间")])]),t._v(" "),a("h3",{attrs:{id:"对齐填充-padding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对齐填充-padding"}},[t._v("#")]),t._v(" 对齐填充(Padding)")]),t._v(" "),a("blockquote",[a("p",[t._v("不是必须的，也没有特别的含义，仅仅起到占位符的作用")])]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208071705379.png",alt:"image-20200709152801713"}})]),t._v(" "),a("h2",{attrs:{id:"对象的访问定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的访问定位"}},[t._v("#")]),t._v(" 对象的访问定位")]),t._v(" "),a("h3",{attrs:{id:"图示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图示"}},[t._v("#")]),t._v(" 图示")]),t._v(" "),a("p",[t._v("JVM是如何通过栈帧中的对象引用访问到其内部的对象实例呢？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208071705205.png",alt:"image-20200709164149920"}})]),t._v(" "),a("h3",{attrs:{id:"对象访问的两种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象访问的两种方式"}},[t._v("#")]),t._v(" 对象访问的两种方式")]),t._v(" "),a("h4",{attrs:{id:"句柄访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#句柄访问"}},[t._v("#")]),t._v(" 句柄访问")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208071705823.png",alt:"image-20200709164342002"}})]),t._v(" "),a("blockquote",[a("p",[t._v("句柄访问就是说栈的局部变量表中，记录的对象的引用，然后在堆空间中开辟了一块空间，也就是句柄池")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("优点")]),t._v(" "),a("p",[t._v("reference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改")])]),t._v(" "),a("h4",{attrs:{id:"直接指针-hotspot采用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接指针-hotspot采用"}},[t._v("#")]),t._v(" 直接指针（HotSpot采用）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208071705475.png",alt:"image-20200709164350466"}})]),t._v(" "),a("blockquote",[a("p",[t._v("直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据")])])])}),[],!1,null,null,null);a.default=s.exports}}]);