(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{409:function(v,a,t){"use strict";t.r(a);var _=t(1),s=Object(_.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("p",[a("strong",[v._v("Table of Contents")]),v._v(" "),a("em",[v._v("generated with "),a("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[v._v("DocToc"),a("OutboundLink")],1)])]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8"}},[v._v("垃圾回收器")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#gc%E5%88%86%E7%B1%BB%E4%B8%8E%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87"}},[v._v("GC分类与性能指标")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%88%86%E7%B1%BB"}},[v._v("垃圾收集器分类")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%8C%89%E7%BA%BF%E7%A8%8B%E6%95%B0%E5%88%86"}},[a("strong",[v._v("按线程数分")])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E6%8C%89%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%E5%88%86"}},[v._v("按工作模式分")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E6%8C%89%E7%A2%8E%E7%89%87%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E5%88%86"}},[v._v("按碎片处理方式分")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E8%AF%84%E4%BC%B0gc%E7%9A%84%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87"}},[v._v("评估GC的性能指标")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%90%9E%E5%90%90%E9%87%8F"}},[v._v("性能指标:吞吐量")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E6%9A%82%E5%81%9C%E6%97%B6%E9%97%B4"}},[v._v("性能指标:暂停时间")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E5%90%9E%E5%90%90%E9%87%8Fvs%E6%9A%82%E5%81%9C%E6%97%B6%E9%97%B4"}},[v._v("吞吐量vs暂停时间")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E6%A6%82%E8%BF%B0"}},[v._v("不同的垃圾回收器概述")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%8F%91%E5%B1%95%E5%8F%B2"}},[v._v("垃圾回收器发展史")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#7%E7%A7%8D%E7%BB%8F%E5%85%B8%E7%9A%84%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"}},[v._v("7种经典的垃圾收集器")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#7%E6%AC%BE%E7%BB%8F%E5%85%B8%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%88%86%E4%BB%A3%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB"}},[v._v("7款经典收集器与垃圾分代之间的关系")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB"}},[v._v("垃圾收集器的组合关系")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E9%BB%98%E8%AE%A4%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"}},[v._v("如何查看默认垃圾收集器")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#serial%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B8%B2%E8%A1%8C%E5%9B%9E%E6%94%B6"}},[v._v("Serial回收器:串行回收")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[v._v("总结")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#parnew%E5%9B%9E%E6%94%B6%E5%99%A8%E5%B9%B6%E8%A1%8C%E5%9B%9E%E6%94%B6"}},[v._v("ParNew回收器:并行回收")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#parallel%E5%9B%9E%E6%94%B6%E5%99%A8%E5%90%9E%E5%90%90%E9%87%8F%E4%BC%98%E5%85%88"}},[v._v("Parallel回收器:吞吐量优先")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE"}},[v._v("参数配置")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#cms%E5%9B%9E%E6%94%B6%E5%99%A8%E4%BD%8E%E5%BB%B6%E8%BF%9F"}},[v._v("CMS回收器:低延迟")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#cms%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95"}},[v._v("CMS为什么不使用标记整理(压缩)算法？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BC%98%E7%82%B9"}},[v._v("优点")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E7%BC%BA%E7%82%B9"}},[v._v("缺点")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%8F%82%E6%95%B0"}},[v._v("设置的参数")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E5%B0%8F%E7%BB%93"}},[v._v("小结")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#jdk%E5%90%8E%E7%BB%AD%E7%89%88%E6%9C%AC%E4%B8%ADcms%E7%9A%84%E5%8F%98%E5%8C%96"}},[v._v("JDK后续版本中CMS的变化")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9B%9E%E6%94%B6%E5%99%A8%E5%8C%BA%E5%9F%9F%E5%8C%96%E5%88%86%E4%BB%A3%E5%BC%8F"}},[v._v("G1回收器:区域化分代式")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%97%A2%E7%84%B6%E6%88%91%E4%BB%AC%E5%B7%B2%E7%BB%8F%E6%9C%89%E4%BA%86%E5%89%8D%E9%9D%A2%E5%87%A0%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%9A%84gc%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%8F%91%E5%B8%83garbage-firstg1"}},[v._v("既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First(G1)？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%90%8D%E5%AD%97%E5%8F%AB-garbage-firstg1%E5%91%A2"}},[v._v("为什么名字叫 Garbage First(G1)呢？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E4%BC%98%E7%82%B9"}},[v._v("G1垃圾收集器的优点")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E7%BC%BA%E7%82%B9"}},[v._v("G1垃圾收集器的缺点")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE"}},[v._v("G1参数设置")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4"}},[v._v("G1收集器的常见操作步骤")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF"}},[v._v("G1收集器的适用场景")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%86%E5%8C%BAregion%E5%8C%96%E6%95%B4%E4%B8%BA%E9%9B%B6"}},[v._v("分区Region:化整为零")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E7%9A%84%E5%9B%9E%E6%94%B6%E8%BF%87%E7%A8%8B"}},[v._v("G1垃圾回收器的回收过程")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#remembered-set%E8%AE%B0%E5%BF%86%E9%9B%86"}},[v._v("Remembered Set(记忆集)")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9B%9E%E6%94%B6%E8%BF%87%E7%A8%8B-%E5%B9%B4%E8%BD%BB%E4%BB%A3gc"}},[v._v("G1回收过程-年轻代GC")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9B%9E%E6%94%B6%E8%BF%87%E7%A8%8B-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E8%BF%87%E7%A8%8B"}},[v._v("G1回收过程-并发标记过程")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9B%9E%E6%94%B6%E8%BF%87%E7%A8%8B---%E6%B7%B7%E5%90%88%E5%9B%9E%E6%94%B6"}},[v._v("G1回收过程 - 混合回收")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9B%9E%E6%94%B6%E5%8F%AF%E9%80%89%E7%9A%84%E8%BF%87%E7%A8%8B4---full-gc"}},[v._v("G1回收可选的过程4 - Full GC")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#g1%E5%9B%9E%E6%94%B6%E7%9A%84%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE"}},[v._v("G1回收的优化建议")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E6%80%BB%E7%BB%93"}},[v._v("垃圾回收器总结")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%80%8E%E4%B9%88%E9%80%89%E6%8B%A9%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8"}},[v._v("怎么选择垃圾回收器")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E9%9D%A2%E8%AF%95"}},[v._v("面试")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#gc%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90"}},[v._v("GC日志分析")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#verbosegc"}},[v._v("verbose:gc")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#printgcdetails"}},[v._v("PrintGCDetails")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E8%A1%A5%E5%85%85"}},[v._v("补充")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#young-gc%E5%9B%BE%E7%89%87"}},[v._v("Young GC图片")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#full-gc%E5%9B%BE%E7%89%87"}},[v._v("Full GC图片")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#gc%E5%9B%9E%E6%94%B6%E4%B8%BE%E4%BE%8B"}},[v._v("GC回收举例")])])])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E7%9A%84%E6%96%B0%E5%8F%91%E5%B1%95"}},[v._v("垃圾回收器的新发展")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#open-jdk12%E7%9A%84shenandoash-gc"}},[v._v("Open JDK12的Shenandoash GC")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#%E9%9D%A9%E5%91%BD%E6%80%A7%E7%9A%84zgc"}},[v._v("革命性的ZGC")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#aligc"}},[v._v("AliGC")])])])])])])]),v._v(" "),a("hr"),v._v(" "),a("h1",{attrs:{id:"垃圾回收器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器"}},[v._v("#")]),v._v(" 垃圾回收器")]),v._v(" "),a("h2",{attrs:{id:"gc分类与性能指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc分类与性能指标"}},[v._v("#")]),v._v(" GC分类与性能指标")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。")])]),v._v(" "),a("li",[a("p",[v._v("由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。")])]),v._v(" "),a("li",[a("p",[v._v("从不同角度分析垃圾收集器，可以将GC分为不同的类型。")])])]),v._v(" "),a("blockquote",[a("p",[v._v("Java不同版本新特性")]),v._v(" "),a("ul",[a("li",[v._v("语法层面:Lambda表达式、switch、自动拆箱装箱、enum")]),v._v(" "),a("li",[v._v("API层面:Stream API、新的日期时间、Optional、String、集合框架")]),v._v(" "),a("li",[v._v("底层优化:JVM优化、GC的变化、元空间、静态域、字符串常量池位置变化")])])]),v._v(" "),a("h3",{attrs:{id:"垃圾收集器分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器分类"}},[v._v("#")]),v._v(" 垃圾收集器分类")]),v._v(" "),a("h4",{attrs:{id:"按线程数分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按线程数分"}},[v._v("#")]),v._v(" "),a("strong",[v._v("按线程数分")])]),v._v(" "),a("p",[a("strong",[v._v("按线程数分")]),v._v("(垃圾回收线程数)，可以分为串行垃圾回收器和并行垃圾回收器。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030101.png",alt:"image-20200713083030867"}})]),v._v(" "),a("ul",[a("li",[a("p",[v._v("串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，"),a("strong",[v._v("串行回收默认被应用在客户端的Client模式下的JVM中")])])]),v._v(" "),a("li",[a("p",[v._v("在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器。")])])])]),v._v(" "),a("li",[a("p",[v._v('和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了"stop-the-world"机制。')])])]),v._v(" "),a("h4",{attrs:{id:"按工作模式分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按工作模式分"}},[v._v("#")]),v._v(" 按工作模式分")]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。")]),v._v(" "),a("ul",[a("li",[v._v("并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。")]),v._v(" "),a("li",[v._v("独占式垃圾回收器(Stop the world)一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。")])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030243.png",alt:"image-20200713083443486"}})]),v._v(" "),a("h4",{attrs:{id:"按碎片处理方式分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按碎片处理方式分"}},[v._v("#")]),v._v(" 按碎片处理方式分")]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("按碎片处理方式分，可分为压缩式垃圾回收器和非压缩式垃圾回收器。")]),v._v(" "),a("ul",[a("li",[a("p",[a("strong",[v._v("压缩式垃圾回收器")]),v._v("会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。")]),v._v(" "),a("ul",[a("li",[v._v("再分配对象空间使用:指针碰撞")])])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("非压缩式的垃圾回收器")]),v._v("不进行这步操作")]),v._v(" "),a("ul",[a("li",[v._v("再分配对象空间使用:空闲列表")])])])])]),v._v(" "),a("ul",[a("li",[v._v("按"),a("strong",[v._v("工作的内存区间")]),v._v("分，又可分为年轻代垃圾回收器和老年代垃圾回收器。")])]),v._v(" "),a("h3",{attrs:{id:"评估gc的性能指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#评估gc的性能指标"}},[v._v("#")]),v._v(" 评估GC的性能指标")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("吞吐量")]),v._v(":"),a("code",[v._v("运行用户代码的时间占总运行时间的比例")]),v._v("(总运行时间 = 程序的运行时间 + 内存回收的时间)")]),v._v(" "),a("li",[v._v("垃圾收集开销:吞吐量的补数，垃圾收集所用时间与总运行时间的比例")]),v._v(" "),a("li",[a("strong",[v._v("暂停时间")]),v._v(":"),a("code",[v._v("执行垃圾收集时，程序的工作线程被暂停的时间")])]),v._v(" "),a("li",[v._v("收集频率:相对于应用程序的执行，收集操作发生的频率")]),v._v(" "),a("li",[a("strong",[v._v("内存占用")]),v._v(":"),a("code",[v._v("Java堆区所占的内存大小")])]),v._v(" "),a("li",[v._v("快速:一个对象从诞生到被回收所经历的时间")])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v('吞吐量、暂停时间、内存占用 这三者共同构成一个"不可能三角"。')]),v._v(" "),a("ul",[a("li",[a("p",[v._v("三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。")])]),v._v(" "),a("li",[a("p",[v._v("这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。\n简单来说，主要抓住两点:")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("吞吐量")])]),v._v(" "),a("li",[a("p",[v._v("暂停时间")])])])])])]),v._v(" "),a("h3",{attrs:{id:"性能指标-吞吐量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能指标-吞吐量"}},[v._v("#")]),v._v(" 性能指标:吞吐量")]),v._v(" "),a("ul",[a("li",[v._v("吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 /(运行用户代码时间+垃圾收集时间)")])]),v._v(" "),a("blockquote",[a("p",[v._v("比如:虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。")])]),v._v(" "),a("ul",[a("li",[a("p",[v._v("这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的")])]),v._v(" "),a("li",[a("p",[v._v("吞吐量优先，意味着在单位时间内，STW的时间最短:0.2+0.2=0.4")])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030441.png",alt:"image-20200713084726176"}})]),v._v(" "),a("h3",{attrs:{id:"性能指标-暂停时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能指标-暂停时间"}},[v._v("#")]),v._v(" 性能指标:暂停时间")]),v._v(" "),a("ul",[a("li",[v._v('"暂停时间"是指一个时间段内应用程序线程暂停，让GC线程执行的状态\n'),a("ul",[a("li",[v._v("例如，GC期间100毫秒的暂停时间意味着在这100毫秒期间内没有应用程序线程是活动的。")])])]),v._v(" "),a("li",[v._v("暂停时间优先，意味着尽可能让单次STW的时间最短:0.1+0.1 + 0.1+ 0.1+ 0.1=0.5")])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030042.png",alt:"image-20200713085306400"}})]),v._v(" "),a("h3",{attrs:{id:"吞吐量vs暂停时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量vs暂停时间"}},[v._v("#")]),v._v(" 吞吐量vs暂停时间")]),v._v(" "),a("ul",[a("li",[a("p",[v._v('高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做"生产性"工作。直觉上，吞吐量越高程序运行越快。')])]),v._v(" "),a("li",[a("p",[v._v("低暂停时间(低延迟)较好因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，"),a("strong",[v._v("有时候甚至短暂的200毫秒暂停都可能打断终端用户体验")]),v._v("。因此，具有低的较大暂停时间是非常重要的，特别是对于一个"),a("strong",[v._v("交互式应用程序")]),v._v("。")])]),v._v(" "),a("li",[a("p",[v._v('不幸的是"高吞吐量"和"低暂停时间"是一对相互竞争的目标(矛盾)。')]),v._v(" "),a("ul",[a("li",[a("p",[v._v("因为如果选择以吞吐量优先，那么"),a("strong",[v._v("必然需要降低内存回收的执行频率")]),v._v("，但是这样会导致GC需要更长的暂停时间来执行内存回收。")])]),v._v(" "),a("li",[a("p",[v._v("相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也"),a("strong",[v._v("只能频繁地执行内存回收")]),v._v("，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。")])])])])]),v._v(" "),a("blockquote",[a("p",[v._v("在设计(或使用)GC算法时，我们必须确定我们的目标:一个GC算法只可能针对两个目标之一(即只专注于较大吞吐量或最小暂停时间)，或尝试找到一个二者的折衷。")]),v._v(" "),a("p",[v._v("现在标准:"),a("strong",[v._v("在最大吞吐量优先的情况下，降低停顿时间")])])]),v._v(" "),a("h2",{attrs:{id:"不同的垃圾回收器概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同的垃圾回收器概述"}},[v._v("#")]),v._v(" 不同的垃圾回收器概述")]),v._v(" "),a("p",[v._v("垃圾收集机制是Java的招牌能力，极大地提高了开发效率。这当然也是面试的热点。")]),v._v(" "),a("p",[v._v("那么，Java常见的垃圾收集器有哪些？")]),v._v(" "),a("blockquote",[a("p",[v._v("GC垃圾收集器是和JVM一脉相承的，它是和JVM进行搭配使用，在不同的使用场景对应的收集器也是有区别")])]),v._v(" "),a("h3",{attrs:{id:"垃圾回收器发展史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器发展史"}},[v._v("#")]),v._v(" 垃圾回收器发展史")]),v._v(" "),a("p",[v._v("有了虚拟机，就一定需要收集垃圾的机制，这就是Garbage Collection，对应的产品我们称为Garbage Collector。")]),v._v(" "),a("ul",[a("li",[v._v("1999年随JDK1.3.1一起来的是串行方式的Serial GC，它是第一款GC。ParNew垃圾收集器是Serial收集器的多线程版本")]),v._v(" "),a("li",[v._v("2002年2月26日，Parallel GC和Concurrent Mark Sweep GC跟随JDK1.4.2一起发布")]),v._v(" "),a("li",[v._v("Parallel GC在JDK6之后成为HotSpot默认GC。")]),v._v(" "),a("li",[v._v("2012年，在JDK1.7u4版本中，G1可用。")]),v._v(" "),a("li",[v._v("2017年，JDK9中G1变成默认的垃圾收集器，以替代CMS。")]),v._v(" "),a("li",[v._v("2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。")]),v._v(" "),a("li",[v._v('2018年9月，JDK11发布。引入Epsilon 垃圾回收器，又被称为 "No-Op(无操作)" 回收器。同时，引入ZGC:可伸缩的低延迟垃圾回收器(Experimental)')]),v._v(" "),a("li",[v._v("2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC:低停顿时间的GC(Experimental)。2019年9月，JDK13发布。增强ZGC，自动返回未用堆内存给操作系统。")]),v._v(" "),a("li",[v._v("2020年3月，JDK14发布。删除CMS垃圾回收器。扩展ZGC在MacOS和Windows上的应用")])]),v._v(" "),a("h3",{attrs:{id:"_7种经典的垃圾收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7种经典的垃圾收集器"}},[v._v("#")]),v._v(" 7种经典的垃圾收集器")]),v._v(" "),a("ul",[a("li",[v._v("串行回收器:Serial、Serial Old")]),v._v(" "),a("li",[v._v("并行回收器:ParNew、Parallel Scavenge、Parallel Old")]),v._v(" "),a("li",[v._v("并发回收器:CMS、G1")])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030911.png",alt:"image-20200713093551365"}})]),v._v(" "),a("h3",{attrs:{id:"_7款经典收集器与垃圾分代之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7款经典收集器与垃圾分代之间的关系"}},[v._v("#")]),v._v(" 7款经典收集器与垃圾分代之间的关系")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030098.png",alt:"image-20200713093757644"}})]),v._v(" "),a("ul",[a("li",[v._v("新生代收集器:Serial、ParNew、Parallel Scavenge")]),v._v(" "),a("li",[v._v("老年代收集器:Serial Old、Parallel Old、CMS")]),v._v(" "),a("li",[v._v("整堆收集器:G1")])]),v._v(" "),a("h3",{attrs:{id:"垃圾收集器的组合关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器的组合关系"}},[v._v("#")]),v._v(" 垃圾收集器的组合关系")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208211615975.png",alt:"image-20220821161549860"}})]),v._v(" "),a("ul",[a("li",[v._v("两个收集器间有连线，表明它们可以搭配使用:Serial/Serial Old、Serial/CMS、ParNew/Serial Old、ParNew/CMS、Parallel Scavenge/Serial Old、Parallel Scavenge/Parallel Old、G1；")]),v._v(" "),a("li",[v._v('其中Serial Old作为CMS出现"Concurrent Mode Failure"失败的后备预案。')]),v._v(" "),a("li",[v._v("(红色虚线)由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial Old这两个组合声明为废弃(JEP173)，并在JDK9中完全取消了这些组合的支持(JEP214)，即:移除。")]),v._v(" "),a("li",[v._v("(绿色虚线)JDK14中:弃用Parallel Scavenge和Serial Old GC组合(JEP366)")]),v._v(" "),a("li",[v._v("(青色虚线)JDK14中:删除CMS垃圾回收器(JEP363)")])]),v._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[v._v("为什么要有很多收集器，一个不够吗？因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。")])]),v._v(" "),a("li",[a("p",[v._v("虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以"),a("strong",[v._v("我们选择的只是对具体应用最合适的收集器")]),v._v("。")])])])]),v._v(" "),a("h3",{attrs:{id:"如何查看默认垃圾收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何查看默认垃圾收集器"}},[v._v("#")]),v._v(" 如何查看默认垃圾收集器")]),v._v(" "),a("ul",[a("li",[a("p",[a("code",[v._v("-XX:+PrintCommandLineFlags")]),v._v(":查看命令行相关参数(包含使用的垃圾收集器)")])]),v._v(" "),a("li",[a("p",[v._v("使用命令行指令:"),a("code",[v._v("jinfo -flag 相关垃圾回收器参数 进程ID")])])])]),v._v(" "),a("h2",{attrs:{id:"serial回收器-串行回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial回收器-串行回收"}},[v._v("#")]),v._v(" Serial回收器:串行回收")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("Serial收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3之前回收新生代唯一的选择。")])]),v._v(" "),a("li",[a("p",[v._v("Serial收集器作为HotSpot中client模式下的默认新生代垃圾收集器。")])]),v._v(" "),a("li",[a("p",[a("strong",[v._v('Serial收集器采用复制算法、串行回收和"stop-the-World"机制的方式执行内存回收')]),v._v("。")])]),v._v(" "),a("li",[a("p",[v._v("除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial Old收集器。"),a("strong",[v._v('Serial Old收集器同样也采用了串行回收和"stop the World"机制，只不过内存回收算法使用的是标记-压缩算法')]),v._v("。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("Serial Old是运行在Client模式下默认的老年代的垃圾回收器")])]),v._v(" "),a("li",[a("p",[v._v("Serial Old在Server模式下主要有两个用途:")]),v._v(" "),a("ul",[a("li",[v._v("与新生代的Parallel Scavenge配合使用")]),v._v(" "),a("li",[v._v("作为老年代CMS收集器的后备垃圾收集方案")])])])])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030986.png",alt:"image-20200713100703799"}})]),v._v(" "),a("blockquote",[a("p",[v._v('这个收集器是一个单线程的收集器，但它的"单线程"的意义'),a("strong",[v._v("并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作")]),v._v("，更重要的是在它进行垃圾收集时，"),a("strong",[v._v("必须暂停其他所有的工作线程")]),v._v("，直到它收集结束(Stop The World)")])]),v._v(" "),a("ul",[a("li",[a("p",[v._v("优势:"),a("code",[v._v("简单而高效")]),v._v("(与其他收集器的单线程比)，对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。")]),v._v(" "),a("ul",[a("li",[v._v("运行在Client模式下的虚拟机是个不错的选择。")])])]),v._v(" "),a("li",[a("p",[v._v("在用户的桌面应用场景中，可用内存一般不大(几十MB至一两百MB)，可以在较短时间内完成垃圾收集(几十ms至一百多ms)，只要不频繁发生，使用串行回收器是可以接受的。")])]),v._v(" "),a("li",[a("p",[v._v("在HotSpot虚拟机中，使用"),a("code",[v._v("-XX:+UseSerialGC")]),v._v("参数可以指定年轻代和老年代都使用串行收集器。")]),v._v(" "),a("ul",[a("li",[v._v("等价于新生代用Serial GC，且老年代用Serial Old GC")])])])]),v._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),a("blockquote",[a("p",[v._v("这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核cpu才可以用。现在都不是单核的了。")]),v._v(" "),a("p",[v._v("对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java web应用程序中是不会采用串行垃圾收集器的。")])]),v._v(" "),a("h2",{attrs:{id:"parnew回收器-并行回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parnew回收器-并行回收"}},[v._v("#")]),v._v(" ParNew回收器:并行回收")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("如果说Serial GC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是Serial收集器的多线程版本。")]),v._v(" "),a("ul",[a("li",[v._v("Par是Parallel的缩写，New:只能处理的是新生代")])])]),v._v(" "),a("li",[a("p",[v._v("ParNew 收集器除了采用"),a("strong",[v._v("并行回收")]),v._v("的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是"),a("strong",[v._v('采用复制算法、"stop-the-World"机制')]),v._v("。")])]),v._v(" "),a("li",[a("p",[v._v("ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器。")])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030563.png",alt:"image-20200713102030127"}})]),v._v(" "),a("ul",[a("li",[v._v("对于新生代，回收次数频繁，使用并行方式高效。")]),v._v(" "),a("li",[v._v("对于老年代，回收次数少，使用串行方式节省资源。(CPU并行需要切换线程，串行可以省去切换线程的资源)")])]),v._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[v._v("由于ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比Serial收集器更高效？")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("ParNew收集器运行在多CPU的环境下，由于可以充分利用多CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量")])]),v._v(" "),a("li",[a("p",[v._v("但是在"),a("strong",[v._v("单个CPU的环境下，ParNew收集器不比Serial收集器更高效")]),v._v("。虽然Serial收集器是基于串行回收，但是由于CPU不需要频繁地做任务切换，因此可以有效避免多线程交互过程中喊声的一系诶额外开销")])])])]),v._v(" "),a("li",[a("p",[v._v("因为除Serial外，目前只有ParNew GC能与CMS收集器配合工作")])])])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("参数配置")]),v._v(" "),a("ul",[a("li",[a("p",[v._v('在程序中，开发人员可以通过选项"-XX:+UseParNewGC"手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。')])]),v._v(" "),a("li",[a("p",[v._v("-XX:ParallelGCThreads限制线程数量，默认开启和CPU数据相同的线程数。")])])])]),v._v(" "),a("h2",{attrs:{id:"parallel回收器-吞吐量优先"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel回收器-吞吐量优先"}},[v._v("#")]),v._v(" Parallel回收器:吞吐量优先")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallell Scavenge收集器同样也采用了"),a("strong",[v._v('复制算法、并行回收和"Stop the World"机制')]),v._v("。")])]),v._v(" "),a("li",[a("p",[v._v("那么Parallel 收集器的出现是否多此一举？")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("和ParNew收集器不同，Parallel Scavenge收集器的目标则是达到一个"),a("strong",[v._v("可控制的吞吐量")]),v._v("(Throughput)，它也被称为吞吐量优先的垃圾收集器。")])]),v._v(" "),a("li",[a("p",[v._v("自适应调节策略也是Parallel Scavenge与ParNew一个重要区别。")])])])]),v._v(" "),a("li",[a("p",[v._v("高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要"),a("strong",[v._v("适合在后台运算而不需要太多交互的任务")]),v._v("。因此，常见在服务器环境中使用。例如，那些执行"),a("strong",[v._v("批量处理")]),v._v("、"),a("strong",[v._v("订单处理")]),v._v("、"),a("strong",[v._v("工资支付")]),v._v("、"),a("strong",[v._v("科学计算")]),v._v("的应用程序。")])]),v._v(" "),a("li",[a("p",[v._v("Parallel收集器在JDK1.6时提供了用于执行老年代垃圾收集的Parallel Old收集器，用来代替老年代的Serial Old收集器。")])]),v._v(" "),a("li",[a("p",[v._v("Parallel Old收集器采用了"),a("strong",[v._v("标记-压缩算法")]),v._v("，但同样也是基于"),a("code",[v._v('并行回收和"stop-the-World"机制')]),v._v("。")])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030753.png",alt:"image-20200713110359441"}})]),v._v(" "),a("blockquote",[a("p",[v._v("在程序吞吐量优先的应用场景中，Parallel收集器和Parallel Old收集器的组合，在Server模式下的内存回收性能很不错。在Java8中，默认是此垃圾收集器。")])]),v._v(" "),a("h3",{attrs:{id:"参数配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数配置"}},[v._v("#")]),v._v(" 参数配置")]),v._v(" "),a("ul",[a("li",[a("p",[a("code",[v._v("-XX:+UseParallelGC")]),v._v(" 手动指定年轻代使用Parallel并行收集器执行内存回收任务。")])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:+UseParallelOldGC")]),v._v(" 手动指定老年代都是使用并行回收收集器。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("分别适用于新生代和老年代。默认jdk8是开启的。")])]),v._v(" "),a("li",[a("p",[v._v("上面两个参数，默认开启一个，另一个也会被开启。(互相激活)")])])])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:ParallelGCThreads")]),v._v(" 设置年轻代并行收集器的线程数。"),a("strong",[v._v("一般地，最好与CPU数量相等")]),v._v("，以避免过多的线程数影响垃圾收集性能。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("在默认情况下，当CPU数量小于8个，ParallelGCThreads的值等于CPU数量。")])]),v._v(" "),a("li",[a("p",[v._v("当CPU数量大于8个，ParallelGCThreads的值等于3+[5*CPU Count]/8]")])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("该参数使用需谨慎")])])])])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:MaxGCPauseMillis")]),v._v(" 设置垃圾收集器最大停顿时间(即STW的时间)。单位是毫秒。")]),v._v(" "),a("ul",[a("li",[v._v("为了尽可能地把停顿时间控制在MaxGCPauseMillis以内，收集器在工作时会调整Java堆大小或者其他一些参数。")]),v._v(" "),a("li",[v._v("对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。该参数使用需谨慎")]),v._v(" "),a("li",[a("strong",[v._v("该参数使用需谨慎")])])])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:GCTimeRatio")]),v._v(" 设置垃圾收集时间占总时间的比例(=1/(N+1))。用于衡量吞吐量的大小。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("取值范围(0,100)，默认值99，也就是垃圾回收时间不超过1。")])]),v._v(" "),a("li",[a("p",[v._v("与前一个-xx:MaxGCPauseMillis参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。")])])])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:+UseAdaptivesizepplicy")]),v._v(" 设置Parallel scavenge收集器具有"),a("strong",[v._v("自适应调节策略")])]),v._v(" "),a("ul",[a("li",[v._v("在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。")]),v._v(" "),a("li",[v._v("在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量(GCTimeRatio)和停顿时间(MaxGCPauseMillis)，让虚拟机自己完成调优工作。")])])])]),v._v(" "),a("h2",{attrs:{id:"cms回收器-低延迟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms回收器-低延迟"}},[v._v("#")]),v._v(" CMS回收器:低延迟")]),v._v(" "),a("blockquote",[a("p",[v._v("在JDK1.5时期，Hotspot推出了一款在"),a("strong",[v._v("强交互应用")]),v._v("中几乎可认为有划时代意义的垃圾收集器:CMS(Concurrent-Mark-Sweep)收集器，"),a("strong",[v._v("这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器")]),v._v("，"),a("strong",[v._v("它第一次实现了让垃圾收集线程与用户线程同时工作")]),v._v("。")])]),v._v(" "),a("blockquote",[a("p",[v._v("CMS收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短(低延迟)就越适合与用户交互的程序，良好的响应速度能提升用户体验。")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短")]),v._v("，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求")])])]),v._v(" "),a("ul",[a("li",[v._v("CMS的垃圾收集算法采用"),a("strong",[v._v("标记-清除算法")]),v._v('，并且也会"stop-the-world"')])]),v._v(" "),a("p",[v._v("不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。")]),v._v(" "),a("p",[v._v("在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030240.png",alt:"image-20200713205154007"}})]),v._v(" "),a("p",[v._v("CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即"),a("code",[v._v("初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段")]),v._v("。(涉及STW的阶段主要是:"),a("strong",[v._v("初始标记")]),v._v(" 和 "),a("strong",[v._v("重新标记")]),v._v(")")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("初始标记")]),v._v('(Initial-Mark)阶段:在这个阶段中，程序中所有的工作线程都将会因为"stop-the-world"机制而出现短暂的暂停，这个阶段的主要任务'),a("strong",[v._v("仅仅只是标记出GCRoots能直接关联到的对象")]),v._v("。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的"),a("strong",[v._v("速度非常快")]),v._v("。")]),v._v(" "),a("li",[a("strong",[v._v("并发标记")]),v._v("(Concurrent-Mark)阶段:从GC Roots的"),a("strong",[v._v("直接关联对象开始遍历整个对象图的过程")]),v._v("，这个过程"),a("strong",[v._v("耗时较长")]),v._v("但是"),a("strong",[v._v("不需要停顿用户线程")]),v._v("，可以与垃圾收集线程一起并发运行。")]),v._v(" "),a("li",[a("strong",[v._v("重新标记")]),v._v("(Remark)阶段:由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了"),a("strong",[v._v("修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录")]),v._v("，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。")]),v._v(" "),a("li",[a("strong",[v._v("并发清除")]),v._v("(Concurrent-Sweep)阶段:此阶段"),a("strong",[v._v("清理删除掉标记阶段判断的已经死亡的对象，释放内存空间")]),v._v("。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的")])]),v._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[v._v("笔记")]),v._v(" "),a("p",[v._v("尽管CMS收集器采用的是并发回收(非独占式)，但是在其"),a("strong",[v._v('初始化标记和再次标记这两个阶段中仍然需要执行"Stop-the-World"机制')]),v._v('暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要"stop-the-World"，只是尽可能地缩短暂停时间。')]),v._v(" "),a("br"),v._v(" "),a("p",[a("strong",[v._v("由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的")]),v._v("。")]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("另外，由于在垃圾收集阶段用户线程没有中断，所以在"),a("strong",[v._v("CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用")]),v._v("。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是"),a("strong",[v._v("当堆内存使用率达到某一阈值时，便开始进行回收")]),v._v('，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次"'),a("code",[v._v("Concurrent Mode Failure")]),v._v('"失败，这时虚拟机将启动后备预案:临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。')])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("CMS收集器的垃圾收集算法采用的是 标记清除算法")]),v._v(" "),a("p",[v._v("这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将"),a("strong",[v._v("会产生一些内存碎片")]),v._v("。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞(Bump the Pointer)技术，而只能够选择空闲列表(Free List)执行内存分配。")])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151030147.png",alt:"image-20200713212230352"}})]),v._v(" "),a("h3",{attrs:{id:"cms为什么不使用标记整理-压缩-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms为什么不使用标记整理-压缩-算法"}},[v._v("#")]),v._v(" CMS为什么不使用标记整理(压缩)算法？")]),v._v(" "),a("blockquote",[a("p",[v._v('答案其实很简答，因为当并发清除的时候，用Compact整理内存的话，现有的内存地址改变了，正在与CMS并发执行的用户线程的资源就没办法继续使用了。要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact更适合"stop the world"这种场景下使用')])]),v._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[v._v("#")]),v._v(" 优点")]),v._v(" "),a("ul",[a("li",[v._v("并发收集")]),v._v(" "),a("li",[v._v("低延迟")])]),v._v(" "),a("h3",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[v._v("#")]),v._v(" 缺点")]),v._v(" "),a("ul",[a("li",[a("p",[a("strong",[v._v("会产生内存碎片")]),v._v("，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发Full GC。")])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("CMS收集器对CPU资源非常敏感")]),v._v("。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。")])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("CMS收集器无法处理浮动垃圾")]),v._v('。可能出现"Concurrent Mode Failure"失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么'),a("strong",[v._v("在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收")]),v._v("，从而只能在下一次执行GC时释放这些之前未被回收的内存空间。")])])]),v._v(" "),a("h3",{attrs:{id:"设置的参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置的参数"}},[v._v("#")]),v._v(" 设置的参数")]),v._v(" "),a("ul",[a("li",[a("p",[a("code",[v._v("-XX:+UseConcMarkSweepGC")]),v._v("手动指定使用CMS收集器执行内存回收任务。")]),v._v(" "),a("ul",[a("li",[v._v("开启该参数后会自动将"),a("code",[v._v("-xx:+UseParNewGC")]),v._v("打开。即:ParNew(Young区用)+CMS(Old区用)+Serial Old的组合。")])])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:CMSInitiatingOccupanyFraction")]),v._v(" 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次CMS回收。"),a("strong",[v._v("JDK6及以上版本默认值为92%")])])]),v._v(" "),a("li",[a("p",[v._v("如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此"),a("strong",[v._v("通过该选项便可以有效降低Full GC的执行次数")]),v._v("。")])])])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:+UseCMSCompactAtFullCollection")]),v._v(" 用于指定在执行完Full GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。")])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:CMSFullGCsBeforeCompaction")]),v._v(" 设置在执行多少次Full GC后对内存空间进行压缩整理。")])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:ParallelCMSThreads")]),v._v(" 设置CMS的线程数量。")]),v._v(" "),a("ul",[a("li",[v._v("CMS默认启动的线程数是(ParallelGCThreads+3)/4，ParallelGCThreads是年轻代并行收集器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。")])])])]),v._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),a("p",[v._v("HotSpot有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC这三个GC有什么不同呢？")]),v._v(" "),a("p",[v._v("请记住以下口令:")]),v._v(" "),a("ul",[a("li",[v._v("如果你想要最小化地使用内存和并行开销，请选Serial GC；")]),v._v(" "),a("li",[v._v("如果你想要最大化应用程序的吞吐量，请选Parallel GC；")]),v._v(" "),a("li",[v._v("如果你想要最小化GC的中断或停顿时间，请选CMS GC。")])]),v._v(" "),a("h3",{attrs:{id:"jdk后续版本中cms的变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk后续版本中cms的变化"}},[v._v("#")]),v._v(" JDK后续版本中CMS的变化")]),v._v(" "),a("ul",[a("li",[a("p",[a("strong",[v._v("JDK9新特性")]),v._v(":CMS被标记为eprecate了(JEP291)")]),v._v(" "),a("ul",[a("li",[v._v("如果对JDK9及以上版本的HotSpot虚拟机使用参数-XX:\n+UseConcMarkSweepGC来开启CMS收集器的话，用户会收到一个警告信息，提示CMS未来将会被废弃。")])])]),v._v(" "),a("li",[a("p",[v._v("JDK14新特性:删除CMS垃圾回收器(JEP363)")]),v._v(" "),a("ul",[a("li",[v._v("如果在JDK14中使用XX:+UseConcMarkSweepGC的话，JVM不会报错，只是给出一个warning信息，但是不会exit。JVM会自动回退以默认GC方式启动JVM")])])])]),v._v(" "),a("h2",{attrs:{id:"g1回收器-区域化分代式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器-区域化分代式"}},[v._v("#")]),v._v(" G1回收器:区域化分代式")]),v._v(" "),a("h3",{attrs:{id:"既然我们已经有了前面几个强大的gc-为什么还要发布garbage-first-g1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#既然我们已经有了前面几个强大的gc-为什么还要发布garbage-first-g1"}},[v._v("#")]),v._v(" 既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First(G1)？")]),v._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[v._v("原因")]),v._v(" "),a("p",[v._v("原因就在于应用程序所应对的"),a("strong",[v._v("业务越来越庞大、复杂，用户越来越多")]),v._v("，没有GC就不能保证应用程序正常进行，而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。G1(Garbage-First)垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。")]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("与此同时，为了适应现在"),a("strong",[v._v("不断扩大的内存和不断增加的处理器数量")]),v._v("，进一步降低暂停时间(pause time)，同时兼顾良好的吞吐量。")]),v._v(" "),a("br"),v._v(" "),a("p",[a("strong",[v._v('官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起"全功能收集器"的重任与期望')]),v._v("。")])]),v._v(" "),a("h3",{attrs:{id:"为什么名字叫-garbage-first-g1-呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么名字叫-garbage-first-g1-呢"}},[v._v("#")]),v._v(" 为什么名字叫 Garbage First(G1)呢？")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域(Region)(物理上不连续的)。使用不同的Region来表示Eden、幸存者0区，幸存者1区，老年代等。")])]),v._v(" "),a("li",[a("p",[v._v("G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小(回收所获得的空间大小以及回收所需时间的经验值)，在后台维护一个优先列表，"),a("strong",[v._v("每次根据允许的收集时间，优先回收价值最大的Region")]),v._v("。")])]),v._v(" "),a("li",[a("p",[v._v("由于这种方式的侧重点在于回收垃圾最大量的区间(Region)，所以我们给G1一个名字:垃圾优先(Garbage First)。")])])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("G1(Garbage-First)是一款面向服务端应用的垃圾收集器")]),v._v(" "),a("p",[a("strong",[v._v("主要针对配备多核CPU及大容量内存的机器")]),v._v("，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。")]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("在JDK1.7版本正式启用，移除了Experimenta1的标识，"),a("strong",[v._v("是JDK9以后的默认垃圾回收器")]),v._v('，取代了CMS回收器以及Parallel+Parallel Old组合。被oracle官方称为"'),a("code",[v._v("全功能的垃圾收集器")]),v._v('"。')]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("与此同时，CMS已经在JDK9中被标记为废弃(deprecated)。在jdk8中还不是默认的垃圾回收器，需要使用-xx:+UseG1GC来启用。")])]),v._v(" "),a("h3",{attrs:{id:"g1垃圾收集器的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾收集器的优点"}},[v._v("#")]),v._v(" G1垃圾收集器的优点")]),v._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[v._v("与其他GC收集器相比，G1使用了全新的分区算法，其特点如下")]),v._v(" "),a("p",[a("strong",[v._v("并行与并发")])]),v._v(" "),a("ul",[a("li",[v._v("并行性:G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW")]),v._v(" "),a("li",[v._v("并发性:G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况")])]),v._v(" "),a("p",[a("strong",[v._v("分代收集")])]),v._v(" "),a("ul",[a("li",[v._v("从分代上看，"),a("strong",[v._v("G1依然属于分代型垃圾回收器")]),v._v("，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。")]),v._v(" "),a("li",[a("strong",[v._v("将堆空间分为若干个区域(Region)，这些区域中包含了逻辑上的年轻代和老年代")]),v._v("。")]),v._v(" "),a("li",[v._v("和之前的各类回收器不同，它同时"),a("strong",[v._v("兼顾年轻代和老年代")]),v._v("。对比其他回收器，或者工作在年轻代，或者工作在老年代；")])])]),v._v(" "),a("br"),v._v(" "),a("Badge",{attrs:{text:"G1所谓的分代，已经不是下面这样的了"}}),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031922.png",alt:"image-20200713215105293"}})]),v._v(" "),a("p",[v._v("而是这样的一个区域")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208221125434.png",alt:"image-20220822112513338"}})]),v._v(" "),a("p",[a("strong",[v._v("空间整合")])]),v._v(" "),a("ul",[a("li",[v._v('CMS:"标记-清除"算法、内存碎片、若干次GC后进行一次碎片整理')]),v._v(" "),a("li",[v._v("G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。"),a("strong",[v._v("Region之间(内部)是复制算法")]),v._v("，"),a("strong",[v._v("但整体上实际可看作是标记-压缩(Mark-Compact)算法")]),v._v("，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。")])]),v._v(" "),a("p",[a("strong",[v._v("可预测的停顿时间模型(即:软实时soft real-time)")])]),v._v(" "),a("blockquote",[a("p",[v._v("这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。")])]),v._v(" "),a("ul",[a("li",[v._v("由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。")]),v._v(" "),a("li",[v._v("G1跟踪各个Region里面的垃圾堆积的价值大小(回收所获得的空间大小以及回收所需时间的经验值)，在后台维护一个优先列表，"),a("strong",[v._v("每次根据允许的收集时间，优先回收价值最大的Region")]),v._v("。保证了G1收集器在有限的时间内可以"),a("strong",[v._v("获取尽可能高的收集效率")]),v._v("。")]),v._v(" "),a("li",[v._v("相比于CMS GC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。")])]),v._v(" "),a("h3",{attrs:{id:"g1垃圾收集器的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾收集器的缺点"}},[v._v("#")]),v._v(" G1垃圾收集器的缺点")]),v._v(" "),a("blockquote",[a("p",[v._v("相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用(Footprint)还是程序运行时的额外执行负载(Overload)都要比CMS要高。")]),v._v(" "),a("p",[v._v("从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。")])]),v._v(" "),a("h3",{attrs:{id:"g1参数设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1参数设置"}},[v._v("#")]),v._v(" G1参数设置")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("-XX:+UseG1GC")]),v._v(":手动指定使用G1垃圾收集器执行内存回收任务")]),v._v(" "),a("li",[a("code",[v._v("-XX:G1HeapRegionSize")]),v._v(" 设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。")]),v._v(" "),a("li",[a("code",[v._v("-XX:MaxGCPauseMillis")]),v._v(" 设置期望达到的最大GC停顿时间指标(JVM会尽力实现，但不保证达到)。默认值是200ms")]),v._v(" "),a("li",[a("code",[v._v("-XX:+ParallelGCThread")]),v._v(" 设置STW工作线程数的值。最多设置为8")]),v._v(" "),a("li",[a("code",[v._v("-XX:ConcGCThreads")]),v._v(" 设置并发标记的线程数。将n设置为并行垃圾回收线程数(ParallelGCThreads)的1/4左右。")]),v._v(" "),a("li",[a("code",[v._v("-XX:InitiatingHeapOccupancyPercent")]),v._v(" 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。")])]),v._v(" "),a("h3",{attrs:{id:"g1收集器的常见操作步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器的常见操作步骤"}},[v._v("#")]),v._v(" G1收集器的常见操作步骤")]),v._v(" "),a("p",[v._v("G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优:")]),v._v(" "),a("ul",[a("li",[v._v("第一步:开启G1垃圾收集器")]),v._v(" "),a("li",[v._v("第二步:设置堆的最大内存")]),v._v(" "),a("li",[v._v("第三步:设置最大的停顿时间")])]),v._v(" "),a("p",[v._v("G1中提供了三种垃圾回收模式:Young GC、Mixed GC和Full GC，在不同的条件下被触发。")]),v._v(" "),a("h3",{attrs:{id:"g1收集器的适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器的适用场景"}},[v._v("#")]),v._v(" G1收集器的适用场景")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("面向服务端应用，针对具有大内存、多处理器的机器。(在普通大小的堆里表现并不惊喜)")])]),v._v(" "),a("li",[a("p",[v._v("最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案；")])]),v._v(" "),a("li",[a("p",[v._v("如:在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；(G1通过每次只清理一部分而不是全部的Region，用这种增量式清理来保证每次GC停顿时间不会过长)。")])]),v._v(" "),a("li",[a("p",[v._v("用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用G1可能比CMS好:")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("超过5%的Java堆被活动数据占用；")])]),v._v(" "),a("li",[a("p",[v._v("对象分配频率或年代提升频率变化很大；")])]),v._v(" "),a("li",[a("p",[v._v("GC停顿时间过长(长于0.5至1秒)")])])])]),v._v(" "),a("li",[a("p",[v._v("HotSpot垃圾收集器里，除了G1以外，其他的垃圾收集器使用内置的JVM线程执行GC的多线程操作，而G1 GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。")])])]),v._v(" "),a("h3",{attrs:{id:"分区region-化整为零"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分区region-化整为零"}},[v._v("#")]),v._v(" 分区Region:化整为零")]),v._v(" "),a("p",[v._v("使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过")]),v._v(" "),a("p",[v._v("XX:G1HeapRegionsize设定。"),a("strong",[v._v("所有的Region大小相同，且在JVM生命周期内不会被改变")]),v._v("。")]),v._v(" "),a("p",[v._v("虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region(不需要连续)的集合。通过Region的动态分配方式实现逻辑上的连续。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031725.png",alt:"image-20200713223244886"}})]),v._v(" "),a("ul",[a("li",[v._v("一个region有可能属于Eden，Survivor或者Old/Tenured内存区域。但是一个region只可能属于一个角色。图中的E表示该region属于Eden内存区域，s表示属于survivor内存区域，o表示属于Old内存区域。图中空白的表示未使用的内存空间。")]),v._v(" "),a("li",[v._v("G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。主要用于存储大对象，如果超过1.5个region，就放到H。")])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("设置H的原因")]),v._v(" "),a("p",[v._v("对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。"),a("strong",[v._v("如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储")]),v._v("。为了能找到连续的H区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。")])]),v._v(" "),a("p",[v._v("每个Region都是通过指针碰撞来分配空间")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031552.png",alt:"image-20200713223509993"}})]),v._v(" "),a("h3",{attrs:{id:"g1垃圾回收器的回收过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾回收器的回收过程"}},[v._v("#")]),v._v(" G1垃圾回收器的回收过程")]),v._v(" "),a("p",[v._v("G1GC的垃圾回收过程主要包括如下三个环节:")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("年轻代GC(Young GC)")])]),v._v(" "),a("li",[a("p",[v._v("老年代并发标记过程(Concurrent Marking)")])]),v._v(" "),a("li",[a("p",[v._v("混合回收(Mixed GC)")])]),v._v(" "),a("li",[a("p",[v._v("(如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。)")])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031373.png",alt:"image-20200713224113996"}})]),v._v(" "),a("p",[v._v("顺时针，Young GC->Young GC+Concurrent Mark->Mixed GC顺序，进行垃圾回收。")]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("提示")]),v._v(" "),a("p",[v._v("应用程序分配内存，"),a("strong",[v._v("当年轻代的Eden区用尽时开始年轻代回收过程")]),v._v("；G1的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后"),a("strong",[v._v("从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及")]),v._v("。")]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("当堆内存使用达到一定值(默认45%)时，开始老年代并发标记过程。")]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，"),a("strong",[v._v("G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了")]),v._v("。同时，这个老年代Region是和年轻代一起被回收的。")]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("举个例子:一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。")])]),v._v(" "),a("h3",{attrs:{id:"remembered-set-记忆集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remembered-set-记忆集"}},[v._v("#")]),v._v(" Remembered Set(记忆集)")]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("一个对象被不同区域引用的问题")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？")])]),v._v(" "),a("li",[a("p",[v._v("在其他的分代收集器，也存在这样的问题(而G1更突出)")])]),v._v(" "),a("li",[a("p",[v._v("回收新生代也不得不同时扫描老年代？这样的话会降低Minor GC的效率；")])])])]),v._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[v._v("解决方法")]),v._v(" "),a("ul",[a("li",[v._v("无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描:")]),v._v(" "),a("li",[a("strong",[v._v("每个Region都有一个对应的Remembered Set")]),v._v("；")]),v._v(" "),a("li",[v._v("每次Reference类型数据写操作时，都会产生一个Write Barrier(写屏障)暂时中断操作；")]),v._v(" "),a("li",[v._v("然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region(其他收集器:检查老年代对象是否引用了新生代对象)；")]),v._v(" "),a("li",[v._v("如果不同，通过cardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；")]),v._v(" "),a("li",[v._v("当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。")])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031039.png",alt:"image-20200713224716715"}})]),v._v(" "),a("h3",{attrs:{id:"g1回收过程-年轻代gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程-年轻代gc"}},[v._v("#")]),v._v(" G1回收过程-年轻代GC")]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("概述")]),v._v(" "),a("p",[v._v("JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。")]),v._v(" "),a("br"),v._v(" "),a("p",[a("strong",[v._v("年轻代垃圾回收只会回收Eden区和Survivor区")])]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("Young GC时，首先G1停止应用程序的执行(Stop-The-World)，G1创建回收集(Collection Set)，回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。")])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031554.png",alt:"image-20200713225100632"}})]),v._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[v._v("然后开始如下回收过程:")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("第一阶段，扫描根")])])]),v._v(" "),a("p",[v._v("根是指static变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同"),a("code",[v._v("RSet")]),v._v("记录的外部引用作为扫描存活对象的入口。")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("第二阶段，更新RSet")])])]),v._v(" "),a("p",[v._v("处理dirty card queue(见备注)中的card，更新"),a("code",[v._v("RSet")]),v._v("。此阶段完成后，"),a("code",[v._v("RSet就可以准确的反映老年代对所在的内存分段中对象的引用")]),v._v("。")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("第三阶段，处理RSet")])])]),v._v(" "),a("p",[v._v("识别被老年代对象指向的"),a("code",[v._v("Eden")]),v._v("中的对象，这些被指向的"),a("code",[v._v("Eden")]),v._v("中的对象被认为是存活的对象。")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("第四阶段，复制对象。")])])]),v._v(" "),a("p",[v._v("此阶段，对象树被遍历，"),a("code",[v._v("Eden")]),v._v("区内存段中存活的对象会被复制到"),a("code",[v._v("Survivor")]),v._v("区中空的内存分段，"),a("code",[v._v("Survivor")]),v._v("区内存段中存活的对象如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到"),a("code",[v._v("Old")]),v._v("区中空的内存分段。如果"),a("code",[v._v("Survivor")]),v._v("空间不够，"),a("code",[v._v("Eden")]),v._v("空间的部分数据会直接晋升到老年代空间。")]),v._v(" "),a("ul",[a("li",[a("strong",[v._v("第五阶段，处理引用")])])]),v._v(" "),a("p",[v._v("处理"),a("code",[v._v("Soft")]),v._v("，"),a("code",[v._v("Weak")]),v._v("，"),a("code",[v._v("Phantom")]),v._v("，"),a("code",[v._v("Final")]),v._v("，"),a("code",[v._v("JNI Weak")]),v._v(" 等引用。最终"),a("code",[v._v("Eden")]),v._v("空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。")])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("dirty card queue")]),v._v(" "),a("p",[v._v("对于应用程序的引用赋值语句object.field=object，JVM会在此赋值代码执行之前和之后执行特殊的操作以在dirty card queue中入队一个保存了对象引用信息的card。在年轻代回收的时候，G1会对Dirty Card Queue中的所有card进行处理，以更新RSet，保证RSet实时准确地反映引用关系。")]),v._v(" "),a("br"),v._v(" "),a("p",[v._v("那为什么不在引用赋值语句处直接更新RSet呢？")]),v._v(" "),a("p",[v._v("这是为了性能的需要，RSet的处理需要线程同步，开销会很大，使用队列性能会好很多。")])]),v._v(" "),a("h3",{attrs:{id:"g1回收过程-并发标记过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程-并发标记过程"}},[v._v("#")]),v._v(" G1回收过程-并发标记过程")]),v._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[v._v("并发标记过程")]),v._v(" "),a("ol",[a("li",[a("strong",[v._v("初始标记阶段")]),v._v("：标记从根节点直接可达的对象。这个阶段是STW的，并且会触发一次年轻代GC。")]),v._v(" "),a("li",[a("strong",[v._v("根区域扫描(Root Region Scanning)")]),v._v("：G1 GC扫描"),a("code",[v._v("Survivor")]),v._v("区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在"),a("code",[v._v("Young GC")]),v._v("之前完成。")]),v._v(" "),a("li",[a("strong",[v._v("并发标记(Concurrent Marking)")]),v._v("：在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被"),a("code",[v._v("Young GC")]),v._v("中断。在并发标记阶段，"),a("strong",[v._v("若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收")]),v._v("。同时，并发标记过程中，会计算每个区域的"),a("code",[v._v("对象活性(区域中存活对象的比例)")]),v._v("。")]),v._v(" "),a("li",[a("strong",[v._v("再次标记(Remark)")]),v._v("：由于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的初始快照算法:"),a("code",[v._v("snapshot-at-the-beginning(SATB)")]),v._v("。")]),v._v(" "),a("li",[a("strong",[v._v("独占清理(cleanup，STW)")]),v._v("：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是STW的。\n"),a("ul",[a("li",[v._v("这个阶段并不会实际上去做垃圾的收集")])])]),v._v(" "),a("li",[a("strong",[v._v("并发清理阶段")]),v._v("：识别并清理完全空闲的区域。")])])]),v._v(" "),a("h3",{attrs:{id:"g1回收过程-混合回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程-混合回收"}},[v._v("#")]),v._v(" G1回收过程 - 混合回收")]),v._v(" "),a("blockquote",[a("p",[v._v("当越来越多的对象晋升到老年代"),a("code",[v._v("Old region")]),v._v("时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即"),a("code",[v._v("Mixed GC")]),v._v("，该算法并不是一个"),a("code",[v._v("Old GC")]),v._v("，除了回收整个"),a("code",[v._v("Young Region")]),v._v("，还会回收一部分的"),a("code",[v._v("Old Region")]),v._v("。这里需要注意:"),a("strong",[v._v("是一部分老年代，而不是全部老年代")]),v._v("。可以选择哪些"),a("code",[v._v("Old Region")]),v._v("进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是"),a("code",[v._v("Mixed GC")]),v._v("并不是"),a("code",[v._v("Full GC")]),v._v("。")])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031124.png",alt:"image-20200713225810871"}})]),v._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[v._v("混合回收过程")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次(可以通过"),a("code",[v._v("-XX:G1MixedGCCountTarget")]),v._v("设置)被回收")])]),v._v(" "),a("li",[a("p",[v._v("混合回收的回收集(Collection Set)包括八分之一的老年代内存分段，"),a("code",[v._v("Eden")]),v._v("区内存分段，"),a("code",[v._v("Survivor")]),v._v("区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。")])]),v._v(" "),a("li",[a("p",[v._v("由于老年代中的内存分段默认分"),a("code",[v._v("8")]),v._v("次回收，G1会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，")])]),v._v(" "),a("li",[a("p",[a("code",[v._v("-XX:G1MixedGCLiveThreshOldPercent")]),v._v("，默认为"),a("code",[v._v("65%")]),v._v("，意思是垃圾占内存分段比例要达到"),a("code",[v._v("65%")]),v._v("才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。")])]),v._v(" "),a("li",[a("p",[v._v("混合回收并不一定要进行"),a("code",[v._v("8")]),v._v("次。有一个阈值"),a("code",[v._v("-XX:G1HeapWastePercent")]),v._v("，默认值为"),a("code",[v._v("10%")]),v._v("，意思是允许整个堆内存中有"),a("code",[v._v("10%")]),v._v("的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于"),a("code",[v._v("10%")]),v._v("，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。")])])])]),v._v(" "),a("h3",{attrs:{id:"g1回收可选的过程4-full-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1回收可选的过程4-full-gc"}},[v._v("#")]),v._v(" G1回收可选的过程4 - Full GC")]),v._v(" "),a("p",[v._v("G1的初衷就是要避免"),a("code",[v._v("Full GC")]),v._v("的出现。但是如果上述方式不能正常工作，G1会"),a("strong",[v._v("停止应用程序的执行")]),v._v("(stop-The-world)，使用"),a("strong",[v._v("单线程")]),v._v("的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。")]),v._v(" "),a("p",[v._v("要避免"),a("code",[v._v("Full GC")]),v._v("的发生，一旦发生需要进行调整。什么时候会发生"),a("code",[v._v("Full GC")]),v._v("呢？")]),v._v(" "),a("p",[v._v("比如"),a("strong",[v._v("堆内存太小")]),v._v("，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到"),a("code",[v._v("Full GC")]),v._v("，这种情况可以通过增大内存解决。")]),v._v(" "),a("p",[v._v("导致G1 Full GC的原因可能有两个:")]),v._v(" "),a("ul",[a("li",[v._v("Evacuation的时候没有足够的to-space来存放晋升的对象；")]),v._v(" "),a("li",[v._v("并发处理过程完成之前空间耗尽。")])]),v._v(" "),a("h3",{attrs:{id:"g1回收的优化建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1回收的优化建议"}},[v._v("#")]),v._v(" G1回收的优化建议")]),v._v(" "),a("blockquote",[a("p",[v._v("从Oracle官方透露出来的信息可获知，回收阶段(Evacuation)其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分Region，停顿时间是用户可控制的，所以并不迫切去实现，而"),a("strong",[v._v("选择把这个特性放到了G1之后出现的低延迟垃圾收集器(即ZGC)中")]),v._v("。另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。")])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("建议")]),v._v(" "),a("p",[v._v("年轻代大小")]),v._v(" "),a("ul",[a("li",[v._v("避免使用-Xmn或-XX:NewRatio等相关选项显式设置年轻代大小")]),v._v(" "),a("li",[v._v("固定年轻代的大小会覆盖暂停时间目标")])]),v._v(" "),a("p",[v._v("暂停时间目标不要太过严苛")]),v._v(" "),a("ul",[a("li",[v._v("G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间")]),v._v(" "),a("li",[v._v("评估G1 GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。")])])]),v._v(" "),a("h2",{attrs:{id:"垃圾回收器总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器总结"}},[v._v("#")]),v._v(" 垃圾回收器总结")]),v._v(" "),a("p",[v._v("截止JDK1.8，一共有7款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。")]),v._v(" "),a("table",[a("thead",[a("tr",[a("th",[v._v("垃圾收集器")]),v._v(" "),a("th",[v._v("分类")]),v._v(" "),a("th",[v._v("作用位置")]),v._v(" "),a("th",[v._v("使用算法")]),v._v(" "),a("th",[v._v("特点")]),v._v(" "),a("th",[v._v("适用场景")])])]),v._v(" "),a("tbody",[a("tr",[a("td",[v._v("Serial")]),v._v(" "),a("td",[v._v("串行运行")]),v._v(" "),a("td",[v._v("新生代")]),v._v(" "),a("td",[v._v("复制算法")]),v._v(" "),a("td",[v._v("响应速度优先")]),v._v(" "),a("td",[v._v("适用于单CPU环境下的Client模式")])]),v._v(" "),a("tr",[a("td",[v._v("ParNew")]),v._v(" "),a("td",[v._v("并行运行")]),v._v(" "),a("td",[v._v("新生代")]),v._v(" "),a("td",[v._v("复制算法")]),v._v(" "),a("td",[v._v("响应速度优先")]),v._v(" "),a("td",[v._v("多CPU环境Server模式下与CMS配合使用")])]),v._v(" "),a("tr",[a("td",[v._v("Parallel")]),v._v(" "),a("td",[v._v("并行运行")]),v._v(" "),a("td",[v._v("新生代")]),v._v(" "),a("td",[v._v("复制算法")]),v._v(" "),a("td",[v._v("吞吐量优先")]),v._v(" "),a("td",[v._v("适用于后台运算而不需要太多交互的场景")])]),v._v(" "),a("tr",[a("td",[v._v("Serial Old")]),v._v(" "),a("td",[v._v("串行运行")]),v._v(" "),a("td",[v._v("老年代")]),v._v(" "),a("td",[v._v("标记-压缩算法")]),v._v(" "),a("td",[v._v("响应速度优先")]),v._v(" "),a("td",[v._v("适用于单CPU环境下的Client模式")])]),v._v(" "),a("tr",[a("td",[v._v("Parallel Old")]),v._v(" "),a("td",[v._v("并行运行")]),v._v(" "),a("td",[v._v("老年代")]),v._v(" "),a("td",[v._v("标记-压缩算法")]),v._v(" "),a("td",[v._v("吞吐量优先")]),v._v(" "),a("td",[v._v("适用于后台运算而不需要太多交互的场景")])]),v._v(" "),a("tr",[a("td",[v._v("CMS")]),v._v(" "),a("td",[v._v("并发运行")]),v._v(" "),a("td",[v._v("老年代")]),v._v(" "),a("td",[v._v("标记-清除算法")]),v._v(" "),a("td",[v._v("响应速度优先")]),v._v(" "),a("td",[v._v("适用于互联网或B/S业务")])]),v._v(" "),a("tr",[a("td",[v._v("G1")]),v._v(" "),a("td",[v._v("并发、并行运行")]),v._v(" "),a("td",[v._v("新生代、老年代")]),v._v(" "),a("td",[v._v("标记-压缩算法、复制算法")]),v._v(" "),a("td",[v._v("响应速度优先")]),v._v(" "),a("td",[v._v("面向服务端应用")])])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031353.png",alt:"image-20200714075738203"}})]),v._v(" "),a("p",[v._v("GC发展阶段:Serial => Parallel(并行)=> CMS(并发)=> G1 => ZGC")]),v._v(" "),a("p",[v._v("不同厂商、不同版本的虚拟机实现差距比较大。HotSpot虚拟机在JDK7/8后所有收集器及组合如下图")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031788.png",alt:"image-20200714080151020"}})]),v._v(" "),a("h3",{attrs:{id:"怎么选择垃圾回收器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么选择垃圾回收器"}},[v._v("#")]),v._v(" 怎么选择垃圾回收器")]),v._v(" "),a("p",[v._v("Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。怎么选择垃圾收集器？")]),v._v(" "),a("ul",[a("li",[v._v("优先调整堆的大小让JVM自适应完成。")]),v._v(" "),a("li",[v._v("如果内存小于100M，使用串行收集器")]),v._v(" "),a("li",[v._v("如果是单核、单机程序，并且没有停顿时间的要求，串行收集器")]),v._v(" "),a("li",[v._v("如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择")]),v._v(" "),a("li",[v._v("如果是多CPU、追求低停顿时间，需快速响应(比如延迟不能超过1秒，如互联网应用)，使用并发收集器")]),v._v(" "),a("li",[v._v("官方推荐G1，性能高。现在互联网的项目，基本都是使用G1。")])]),v._v(" "),a("p",[v._v("最后需要明确一个观点:")]),v._v(" "),a("ul",[a("li",[v._v("没有最好的收集器，更没有万能的收集")]),v._v(" "),a("li",[v._v("调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器")])]),v._v(" "),a("h3",{attrs:{id:"面试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试"}},[v._v("#")]),v._v(" 面试")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。\n这里较通用、基础性的部分如下:")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("垃圾收集的算法有哪些？如何判断一个对象是否可以回收？")])]),v._v(" "),a("li",[a("p",[v._v("垃圾收集器工作的基本流程。")])])])]),v._v(" "),a("li",[a("p",[v._v("另外，大家需要多关注垃圾回收器这一章的各种常用的参数")])])]),v._v(" "),a("h2",{attrs:{id:"gc日志分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc日志分析"}},[v._v("#")]),v._v(" GC日志分析")]),v._v(" "),a("p",[v._v("通过阅读GC日志，我们可以了解Java虚拟机内存分配与回收策略。\n内存分配与垃圾回收的参数列表")]),v._v(" "),a("ul",[a("li",[v._v("-XX:+PrintGC输出GC日志。类似:-verbose:gc")]),v._v(" "),a("li",[v._v("-XX:+PrintGCDetails输出GC的详细日志")]),v._v(" "),a("li",[v._v("-XX:+PrintGCTimestamps 输出GC的时间戳(以基准时间的形式)")]),v._v(" "),a("li",[v._v("-XX:+PrintGCDatestamps 输出GC的时间戳(以日期的形式，如2013-05-04T21:53:59.234+0800)")]),v._v(" "),a("li",[v._v("-XX:+PrintHeapAtGC在进行GC的前后打印出堆的信息")]),v._v(" "),a("li",[v._v("-Xloggc:../logs/gc.log日志文件的输出路径")])]),v._v(" "),a("h3",{attrs:{id:"verbose-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verbose-gc"}},[v._v("#")]),v._v(" verbose:gc")]),v._v(" "),a("p",[v._v("打开GC日志")]),v._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-verbose:gc")]),v._v("\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br")])]),a("p",[v._v("这个只会显示总的GC堆的变化，如下:")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031578.png",alt:"image-20200714081610474"}})]),v._v(" "),a("p",[v._v("参数解析")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151032734.png",alt:"image-20200714081622526"}})]),v._v(" "),a("h3",{attrs:{id:"printgcdetails"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#printgcdetails"}},[v._v("#")]),v._v(" PrintGCDetails")]),v._v(" "),a("p",[v._v("打开GC日志")]),v._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-verbose:gc")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-XX:+PrintGCDetails")]),v._v("\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br")])]),a("p",[v._v("输入信息如下")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031313.png",alt:"image-20200714081909309"}})]),v._v(" "),a("p",[v._v("参数解析")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031960.png",alt:"image-20200714081925767"}})]),v._v(" "),a("h3",{attrs:{id:"补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[v._v("#")]),v._v(" 补充")]),v._v(" "),a("ul",[a("li",[a("p",[v._v('[GC"和"[Full GC"说明了这次垃圾收集的停顿类型，如果有"Full"则说明GC发生了"stop The World"')])]),v._v(" "),a("li",[a("p",[v._v('使用Serial收集器在新生代的名字是Default New Generation，因此显示的是"[DefNew"')])]),v._v(" "),a("li",[a("p",[v._v('使用ParNew收集器在新生代的名字会变成"[ParNew"，意思是"Parallel New Generation"')])]),v._v(" "),a("li",[a("p",[v._v('使用Parallel scavenge收集器在新生代的名字是"[PSYoungGen"')])]),v._v(" "),a("li",[a("p",[v._v("老年代的收集和新生代道理一样，名字也是收集器决定的")])]),v._v(" "),a("li",[a("p",[v._v('使用G1收集器的话，会显示为"garbage-first heap"')])]),v._v(" "),a("li",[a("p",[v._v("Allocation Failure：表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。")])]),v._v(" "),a("li",[a("p",[v._v("[PSYoungGen:5986K->696K(8704K)]5986K->704K(9216K)中括号内:GC回收前年轻代大小，回收后大小，(年轻代总大小)括号外:GC回收前年轻代和老年代大小，回收后大小，(年轻代和老年代总大小)")])]),v._v(" "),a("li",[a("p",[v._v("user代表用户态回收耗时，sys内核态回收耗时，rea实际耗时。由于多核的原因，时间总和可能会超过rea1时间")])])]),v._v(" "),a("h3",{attrs:{id:"young-gc图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#young-gc图片"}},[v._v("#")]),v._v(" Young GC图片")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031751.png",alt:"image-20200714082555688"}})]),v._v(" "),a("h3",{attrs:{id:"full-gc图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#full-gc图片"}},[v._v("#")]),v._v(" Full GC图片")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031211.png",alt:"image-20200714082714690"}})]),v._v(" "),a("h3",{attrs:{id:"gc回收举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc回收举例"}},[v._v("#")]),v._v(" GC回收举例")]),v._v(" "),a("p",[v._v("我们编写一个程序，用来说明GC收集的过程")]),v._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[v._v("/**\n * GC垃圾收集过程\n */")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("public")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("GCUseTest")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("static")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("final")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Integer")]),v._v(" _1MB "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("1024")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("public")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("static")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("void")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[v._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("byte")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" allocation1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" allocation2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" allocation3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" allocation4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        allocation1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v("_1MB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        allocation2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v("_1MB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        allocation3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v("_1MB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        allocation4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("4")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v("_1MB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br"),a("span",{staticClass:"line-number"},[v._v("2")]),a("br"),a("span",{staticClass:"line-number"},[v._v("3")]),a("br"),a("span",{staticClass:"line-number"},[v._v("4")]),a("br"),a("span",{staticClass:"line-number"},[v._v("5")]),a("br"),a("span",{staticClass:"line-number"},[v._v("6")]),a("br"),a("span",{staticClass:"line-number"},[v._v("7")]),a("br"),a("span",{staticClass:"line-number"},[v._v("8")]),a("br"),a("span",{staticClass:"line-number"},[v._v("9")]),a("br"),a("span",{staticClass:"line-number"},[v._v("10")]),a("br"),a("span",{staticClass:"line-number"},[v._v("11")]),a("br"),a("span",{staticClass:"line-number"},[v._v("12")]),a("br"),a("span",{staticClass:"line-number"},[v._v("13")]),a("br")])]),a("p",[v._v("我们设置JVM启动参数")]),v._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-Xms10m")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-Xmx10m")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-XX:+PrintGCDetails")]),v._v("\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br")])]),a("p",[v._v("首先我们会将3个2M的数组存放到Eden区，然后后面4M的数组来了后，将无法存储，因为Eden区只剩下2M的剩余空间了，那么将会进行一次Young GC操作，将原来Eden区的内容，存放到Survivor区，但是Survivor区也存放不下，那么就会直接晋级存入Old 区")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031923.png",alt:"image-20200714083332238"}})]),v._v(" "),a("p",[v._v("然后我们将4M对象存入到Eden区中")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031584.png",alt:"image-20200714083526790"}})]),v._v(" "),a("blockquote",[a("p",[v._v("在jdk7当中，这个大对象在Eden区存放不下时，是把原有的Eden对象移动到了老年代，然后把大对象存放到Eden区。")]),v._v(" "),a("p",[v._v("而在jdk8当中，是直接把这个大对象存到老年代，Eden区原本的对象不动")])]),v._v(" "),a("p",[v._v("可以用一些工具去分析这些GC日志")]),v._v(" "),a("p",[v._v("常用的日志分析工具有:"),a("strong",[v._v("GCViewer、GCEasy")]),v._v("、GCHisto、GCLogViewer、Hpjmeter、garbagecat等")]),v._v(" "),a("p",[a("strong",[v._v("GCViewer")])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151031186.png",alt:"image-20200714084921184"}})]),v._v(" "),a("p",[a("strong",[v._v("GC easy")])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151032614.png",alt:"image-20200714084726824"}})]),v._v(" "),a("h2",{attrs:{id:"垃圾回收器的新发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的新发展"}},[v._v("#")]),v._v(" 垃圾回收器的新发展")]),v._v(" "),a("p",[v._v("GC仍然处于飞速发展之中，目前的默认选项G1 GC在不断的进行改进，很多我们原来认为的缺点，例如串行的Full GC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK10以后，Full GC已经是并行运行，在很多场景下，其表现还略优于Parallel GC的并行Full GC实现。")]),v._v(" "),a("p",[v._v("即使是Serial GC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，在Serverless等新的应用场景下，Serial GC找到了新的舞台。")]),v._v(" "),a("p",[v._v("比较不幸的是CMS GC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK9中已经被标记为废弃，并在JDK14版本中移除")]),v._v(" "),a("p",[v._v('Epsilon:A No-Op GarbageCollector(Epsilon垃圾回收器，"No-Op(无操作)"回收器)http://openidk.iava.net/ieps/318')]),v._v(" "),a("p",[v._v("ZGC:A Scalable Low-Latency Garbage Collector(Experimental)(ZGC:可伸缩的低延迟垃圾回收器，处于实验性阶段)")]),v._v(" "),a("p",[v._v("现在G1回收器已成为默认回收器好几年了。我们还看到了引入了两个新的收集器:ZGC(JDK11出现)和Shenandoah(Open JDK12)")]),v._v(" "),a("blockquote",[a("p",[v._v("主打特点:低停顿时间")])]),v._v(" "),a("h3",{attrs:{id:"open-jdk12的shenandoash-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#open-jdk12的shenandoash-gc"}},[v._v("#")]),v._v(" Open JDK12的Shenandoash GC")]),v._v(" "),a("p",[v._v("Open JDK12的shenandoash GC:低停顿时间的GC(实验性)")]),v._v(" "),a("p",[v._v("Shenandoah，无疑是众多GC中最孤独的一个。是第一款不由Oracle公司团队领导开发的Hotspot垃圾收集器。不可避免的受到官方的排挤。比如号称openJDK和OracleJDk没有区别的Oracle公司仍拒绝在oracleJDK12中支持Shenandoah。")]),v._v(" "),a("p",[v._v("Shenandoah垃圾回收器最初由RedHat进行的一项垃圾收集器研究项目Pauseless GC的实现，旨在针对JVM上的内存回收实现低停顿的需求。在2014年贡献给OpenJDK。")]),v._v(" "),a("p",[v._v("Red Hat研发Shenandoah团队对外宣称，Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151032952.png",alt:"image-20200714090608807"}})]),v._v(" "),a("p",[v._v("这是RedHat在2016年发表的论文数据，测试内容是使用ES对200GB的维基百科数据进行索引。从结果看:")]),v._v(" "),a("blockquote",[a("p",[v._v("停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。\n而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。")])]),v._v(" "),a("p",[v._v("总结")]),v._v(" "),a("ul",[a("li",[v._v("shenandoah GC的弱项:高运行负担下的吞吐量下降。")]),v._v(" "),a("li",[v._v("shenandoah GC的强项:低延迟时间。")])]),v._v(" "),a("h3",{attrs:{id:"革命性的zgc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#革命性的zgc"}},[v._v("#")]),v._v(" 革命性的ZGC")]),v._v(" "),a("p",[v._v("ZGC与shenandoah目标高度相似，"),a("strong",[v._v("在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟")]),v._v("。")]),v._v(" "),a("p",[v._v("《深入理解Java虚拟机》一书中这样定义ZGC:ZGC收集器是一款基于Region内存布局的，(暂时)不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现"),a("strong",[v._v("可并发的标记-压缩算法")]),v._v("的，以"),a("strong",[v._v("低延迟为首要目标")]),v._v("的一款垃圾收集器。")]),v._v(" "),a("p",[v._v("ZGC的工作过程可以分为4个阶段:"),a("strong",[v._v("并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射")]),v._v(" 等。")]),v._v(" "),a("p",[v._v("ZGC几乎在所有地方并发执行的，"),a("strong",[v._v("除了初始标记的是STW的")]),v._v("。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151032422.png",alt:"image-20200714091201073"}})]),v._v(" "),a("p",[v._v("停顿时间对比")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151032123.png",alt:"image-20200714091401511"}})]),v._v(" "),a("p",[v._v('虽然ZGC还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用"令人震惊、革命性"来形容，不为过。')]),v._v(" "),a("p",[v._v("未来将在服务端、大内存、低延迟应用的首选垃圾收集器。")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151032810.png",alt:"image-20200714093243028"}})]),v._v(" "),a("ul",[a("li",[a("p",[v._v("JDK14之前，ZGC仅Linux才支持。")])]),v._v(" "),a("li",[a("p",[v._v("尽管许多使用ZGC的用户都使用类Linux的环境，但在Windows和MacOS上，人们也需要ZGC进行开发部署和测试。许多桌面应用也可以从ZGC中受益。因此，ZGC特性被移植到了Windows和MacOS上。")])]),v._v(" "),a("li",[a("p",[v._v("现在Mac或Windows上也能使用ZGC了，示例如下:")])])]),v._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-XX:+UnlockExperimentalVMOptions")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-XX:+UseZGC")]),v._v("\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br")])]),a("h3",{attrs:{id:"aligc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aligc"}},[v._v("#")]),v._v(" AliGC")]),v._v(" "),a("p",[v._v("AliGC是阿里巴巴JVM团队基于G1算法，面向大堆(Large Heap)应用场景。指定场景下的对比:")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://images.zaiolos.top/images/202208151032085.png",alt:"image-20200714093604012"}})]),v._v(" "),a("p",[v._v("当然，其它厂商也提供了各种别具一格的GC实现，例如比较有名的低延迟GC Zing")])],1)}),[],!1,null,null,null);a.default=s.exports}}]);