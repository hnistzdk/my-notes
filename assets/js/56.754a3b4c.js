(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{404:function(t,v,a){"use strict";a.r(v);var _=a(1),s=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[v("strong",[t._v("Table of Contents")]),t._v(" "),v("em",[t._v("generated with "),v("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("DocToc"),v("OutboundLink")],1)])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E"}},[t._v("执行引擎")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0"}},[t._v("执行引擎概述")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B"}},[t._v("执行引擎的工作流程")])])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#java%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%92%8C%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B"}},[t._v("Java代码编译和执行过程")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%A7%A3%E9%87%8A%E5%99%A8interpreter"}},[t._v("什么是解释器（Interpreter）")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AFit%E7%BC%96%E8%AF%91%E5%99%A8"}},[t._v("什么是IT编译器")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88java%E6%98%AF%E5%8D%8A%E7%BC%96%E8%AF%91%E5%8D%8A%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80"}},[t._v("为什么Java是半编译半解释型语言")])])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%9C%BA%E5%99%A8%E7%A0%81%E6%8C%87%E4%BB%A4%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80"}},[t._v("机器码、指令、汇编语言")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E6%9C%BA%E5%99%A8%E7%A0%81"}},[t._v("机器码")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%8C%87%E4%BB%A4"}},[t._v("指令")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%8C%87%E4%BB%A4%E9%9B%86"}},[t._v("指令集")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80"}},[t._v("汇编语言")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80"}},[t._v("高级语言")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#cc%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B"}},[t._v("C、C++源程序执行过程")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E5%AD%97%E8%8A%82%E7%A0%81"}},[t._v("字节码")])])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E8%A7%A3%E9%87%8A%E5%99%A8"}},[t._v("解释器")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E8%A7%A3%E9%87%8A%E5%99%A8%E5%88%86%E7%B1%BB"}},[t._v("解释器分类")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E7%8E%B0%E7%8A%B6"}},[t._v("现状")])])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#jit%E7%BC%96%E8%AF%91%E5%99%A8"}},[t._v("JIT编译器")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#java%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%A7%E8%A1%8C%E5%88%86%E7%B1%BB"}},[t._v("Java代码的执行分类")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E9%97%AE%E9%A2%98%E6%9D%A5%E4%BA%86"}},[t._v("问题来了")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#hotspot-jvm%E6%89%A7%E8%A1%8C%E6%96%B9%E5%BC%8F"}},[t._v("HotSpot JVM执行方式")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%A1%88%E4%BE%8B"}},[t._v("案例")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A"}},[t._v("概念解释")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E7%83%AD%E7%82%B9%E6%8E%A2%E6%B5%8B%E6%8A%80%E6%9C%AF"}},[t._v("热点探测技术")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E8%AE%A1%E6%95%B0%E5%99%A8"}},[t._v("方法调用计数器")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E7%83%AD%E5%BA%A6%E8%A1%B0%E5%87%8F"}},[t._v("热度衰减")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E5%9B%9E%E8%BE%B9%E8%AE%A1%E6%95%B0%E5%99%A8"}},[t._v("回边计数器")])])])]),t._v(" "),v("li",[v("a",{attrs:{href:"#hotspotvm-%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95"}},[t._v("HotSpotVM 可以设置程序执行方法")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#hotspotvm%E4%B8%AD-jit-%E5%88%86%E7%B1%BB"}},[t._v("HotSpotVM中 JIT 分类")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#c1-%E5%92%8C-c2%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5"}},[t._v("C1 和 C2编译器不同的优化策略")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E5%88%86%E5%B1%82%E7%BC%96%E8%AF%91%E7%AD%96%E7%95%A5"}},[t._v("分层编译策略")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[t._v("总结")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#graal%E7%BC%96%E8%AF%91%E5%99%A8"}},[t._v("Graal编译器")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#aot%E7%BC%96%E8%AF%91%E5%99%A8"}},[t._v("AOT编译器")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E5%86%99%E5%88%B0%E6%9C%80%E5%90%8E"}},[t._v("写到最后")])])])])])])]),t._v(" "),v("hr"),t._v(" "),v("h1",{attrs:{id:"执行引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎"}},[t._v("#")]),t._v(" 执行引擎")]),t._v(" "),v("h2",{attrs:{id:"执行引擎概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎概述"}},[t._v("#")]),t._v(" 执行引擎概述")]),t._v(" "),v("p",[t._v("执行引擎属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512979.png",alt:"image-20200710080707873"}})]),t._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[t._v("执行引擎是Java虚拟机核心的组成部分之一")]),t._v(" "),v("p",[t._v('"虚拟机"是一个相对于"物理机"的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。')])]),t._v(" "),v("p",[t._v("JVM的主要任务是负责装载字节码到其内部，但"),v("strong",[t._v("字节码并不能够直接运行在操作系统之上")]),t._v("，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的"),v("code",[t._v("字节码指令")]),t._v("、"),v("code",[t._v("符号表")]),t._v("，以及其他"),v("code",[t._v("辅助信息")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512866.png",alt:"image-20200710081118053"}})]),t._v(" "),v("blockquote",[v("p",[t._v("那么，如果想要让一个Java程序运行起来，执行引擎（Execution Engine）的任务就是"),v("strong",[t._v("将字节码指令解释/编译为对应平台上的本地机器指令")]),t._v("才可以。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512345.png",alt:"image-20200710081259276"}})]),t._v(" "),v("h3",{attrs:{id:"执行引擎的工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎的工作流程"}},[t._v("#")]),t._v(" 执行引擎的工作流程")]),t._v(" "),v("ul",[v("li",[t._v("执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。")]),t._v(" "),v("li",[t._v("每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。")]),t._v(" "),v("li",[t._v("当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512168.png",alt:"image-20200710081627217"}})]),t._v(" "),v("blockquote",[v("p",[t._v("从外观上来看，所有的Java虚拟机的执行引擎输入，输出都是一致的：输入的是"),v("strong",[t._v("字节码二进制流")]),t._v("，处理过程是"),v("strong",[t._v("字节码解析执行")]),t._v("的等效过程，输出的是"),v("strong",[t._v("执行过程")])])]),t._v(" "),v("h2",{attrs:{id:"java代码编译和执行过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java代码编译和执行过程"}},[t._v("#")]),t._v(" Java代码编译和执行过程")]),t._v(" "),v("p",[t._v("大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过下图中的各个步骤")]),t._v(" "),v("ul",[v("li",[t._v("前面橙色部分是生成字节码文件的过程，和JVM无关")]),t._v(" "),v("li",[t._v("后面蓝色和绿色才是JVM需要考虑的过程")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512962.png",alt:"image-20200710082141643"}})]),t._v(" "),v("p",[t._v("Java代码编译是由Java源码编译器来完成，流程图如下所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512090.png",alt:"image-20200710082433146"}})]),t._v(" "),v("p",[t._v("Java字节码的执行是由JVM执行引擎来完成，流程图 如下所示")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512358.png",alt:"image-20200710083036258"}})]),t._v(" "),v("p",[t._v("我们用一个总的图，来说说 解释器和编译器")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512156.png",alt:"image-20200710083656277"}})]),t._v(" "),v("h3",{attrs:{id:"什么是解释器-interpreter"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是解释器-interpreter"}},[t._v("#")]),t._v(" 什么是解释器（Interpreter）")]),t._v(" "),v("blockquote",[v("p",[t._v("当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。")])]),t._v(" "),v("h3",{attrs:{id:"什么是it编译器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是it编译器"}},[t._v("#")]),t._v(" 什么是IT编译器")]),t._v(" "),v("blockquote",[v("p",[t._v("JIT（Just In Time Compiler）编译器：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。")])]),t._v(" "),v("h3",{attrs:{id:"为什么java是半编译半解释型语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么java是半编译半解释型语言"}},[t._v("#")]),t._v(" 为什么Java是半编译半解释型语言")]),t._v(" "),v("blockquote",[v("p",[t._v("JDK1.1时代，将Java语言定位为“解释执行”还是比较准确的。再后来，Java也发展出可以直接生成本地代码的编译器。")]),t._v(" "),v("p",[t._v("现在JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行。")]),t._v(" "),v("p",[t._v("翻译成本地代码后，就可以做一个缓存操作，存储在方法区中")])]),t._v(" "),v("h2",{attrs:{id:"机器码、指令、汇编语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#机器码、指令、汇编语言"}},[t._v("#")]),t._v(" 机器码、指令、汇编语言")]),t._v(" "),v("h3",{attrs:{id:"机器码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#机器码"}},[t._v("#")]),t._v(" 机器码")]),t._v(" "),v("p",[t._v("各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它采编写程序，这就是机器语言。")]),t._v(" "),v("p",[t._v("机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。")]),t._v(" "),v("p",[t._v("用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。")]),t._v(" "),v("p",[t._v("机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同。")]),t._v(" "),v("h3",{attrs:{id:"指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[t._v("#")]),t._v(" 指令")]),t._v(" "),v("p",[t._v("由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。")]),t._v(" "),v("p",[t._v("指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好")]),t._v(" "),v("p",[t._v("由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。")]),t._v(" "),v("h3",{attrs:{id:"指令集"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#指令集"}},[t._v("#")]),t._v(" 指令集")]),t._v(" "),v("p",[t._v("不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。\n如常见的")]),t._v(" "),v("ul",[v("li",[t._v("x86指令集，对应的是x86架构的平台")]),t._v(" "),v("li",[t._v("ARM指令集，对应的是ARM架构的平台")])]),t._v(" "),v("h3",{attrs:{id:"汇编语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#汇编语言"}},[t._v("#")]),t._v(" 汇编语言")]),t._v(" "),v("p",[t._v("由于指令的可读性还是太差，于是人们又发明了汇编语言。")]),t._v(" "),v("p",[t._v("在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。")]),t._v(" "),v("blockquote",[v("p",[t._v("由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。")])]),t._v(" "),v("h3",{attrs:{id:"高级语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高级语言"}},[t._v("#")]),t._v(" 高级语言")]),t._v(" "),v("p",[t._v("为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。")]),t._v(" "),v("p",[t._v("高级语言比机器语言、汇编语言更接近人的语言当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做"),v("strong",[t._v("解释程序或编译程序")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091512359.png",alt:"image-20200710085323733"}})]),t._v(" "),v("p",[t._v("高级语言也不是直接翻译成 "),v("code",[t._v("机器指令")]),t._v("，而是翻译成"),v("code",[t._v("汇编语言")]),t._v("，如下面说的C和C++")]),t._v(" "),v("h3",{attrs:{id:"c、c-源程序执行过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#c、c-源程序执行过程"}},[t._v("#")]),t._v(" C、C++源程序执行过程")]),t._v(" "),v("p",[t._v("编译过程又可以分成两个阶段：编译和汇编。")]),t._v(" "),v("p",[t._v("编译过程：是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码")]),t._v(" "),v("p",[t._v("汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091513398.png",alt:"image-20200710085553258"}})]),t._v(" "),v("h3",{attrs:{id:"字节码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字节码"}},[t._v("#")]),t._v(" 字节码")]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码")]),t._v(" "),v("li",[t._v("字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。")]),t._v(" "),v("li",[t._v("字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。")])])]),t._v(" "),v("Badge",{attrs:{text:"字节码典型的应用为：Java bytecode"}}),t._v(" "),v("h2",{attrs:{id:"解释器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解释器"}},[t._v("#")]),t._v(" 解释器")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("来由")]),t._v(" "),v("p",[t._v("JVM设计者们的初衷仅仅只是单纯地为了满足Java程序实现跨平台特性，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了实现解释器，并在运行时采用逐行解释字节码执行程序的想法。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091513758.png",alt:"image-20200710090203674"}})]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("为什么Java源文件不直接翻译成JMV，而是翻译成字节码文件？")]),t._v(" "),v("p",[t._v("可能是因为直接翻译的代码是比较大的")]),t._v(" "),v("p",[t._v('解释器真正意义上所承担的角色就是一个运行时"翻译者"，将字节码文件中的内容"翻译"为对应平台的本地机器指令执行。')]),t._v(" "),v("p",[t._v("当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。")])]),t._v(" "),v("h3",{attrs:{id:"解释器分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解释器分类"}},[t._v("#")]),t._v(" 解释器分类")]),t._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[t._v("在Java的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器。")]),t._v(" "),v("p",[t._v("字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下。")]),t._v(" "),v("p",[t._v("而模板解释器将"),v("strong",[t._v("每一条字节码和一个模板函数相关联")]),t._v("，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Interpreter模块：实现了解释器的核心功能")])]),t._v(" "),v("li",[v("p",[t._v("Code模块：用于管理HotSpot VM在运行时生成的本地机器指令")])])])])])]),t._v(" "),v("h3",{attrs:{id:"现状"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#现状"}},[t._v("#")]),t._v(" 现状")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、Per1、Ruby等。但是在今天，"),v("code",[t._v("基于解释器执行已经沦落为低效的代名词")]),t._v("，并且时常被一些C/C++程序员所调侃。")])]),t._v(" "),v("li",[v("p",[t._v("为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是"),v("code",[t._v("将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可")]),t._v("，这种方式可以使执行效率大幅度提升。")])]),t._v(" "),v("li",[v("p",[t._v("不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。")])])]),t._v(" "),v("h2",{attrs:{id:"jit编译器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jit编译器"}},[t._v("#")]),t._v(" JIT编译器")]),t._v(" "),v("h3",{attrs:{id:"java代码的执行分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java代码的执行分类"}},[t._v("#")]),t._v(" Java代码的执行分类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("第一种是将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转为机器码执行")])]),t._v(" "),v("li",[v("p",[t._v("第二种是编译执行（直接编译成机器码）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT，Just In Time）将方法编译成机器码后再执行")])])]),t._v(" "),v("blockquote",[v("p",[t._v("HotSpot VM是目前市面上高性能虚拟机的代表作之一。"),v("strong",[t._v("它采用解释器与即时编译器并存的架构")]),t._v("。在Java虚拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。")])]),t._v(" "),v("p",[t._v("在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++ 程序一较高下的地步。")]),t._v(" "),v("h3",{attrs:{id:"问题来了"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问题来了"}},[t._v("#")]),t._v(" 问题来了")]),t._v(" "),v("p",[t._v("有些开发人员会感觉到诧异，既然HotSpot VM中已经内置JIT编译器了，那么为什么还需要再使用解释器来“拖累”程序的执行性能呢？比如JRockit VM内部就不包含解释器，字节码全部都依靠即时编译器编译后执行。")]),t._v(" "),v("ul",[v("li",[t._v("JRockit虚拟机是砍掉了解释器，也就是只采及时编译器。那是因为呢JRockit只部署在服务器上，一般已经有时间让他进行指令编译的过程了，对于响应来说要求不高，等及时编译器的编译完成后，就会提供更好的性能")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("首先明确")]),t._v(" "),v("p",[t._v("当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。\n编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后，执行效率高。")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("所以")]),t._v(" "),v("p",[t._v("尽管JRockit VM中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。")]),t._v(" "),v("p",[t._v("在此模式下，"),v("strong",[t._v("当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率")]),t._v("。")]),t._v(" "),v("p",[t._v("同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”。")])]),t._v(" "),v("h3",{attrs:{id:"hotspot-jvm执行方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hotspot-jvm执行方式"}},[t._v("#")]),t._v(" HotSpot JVM执行方式")]),t._v(" "),v("blockquote",[v("p",[t._v("当虚拟机启动的时候，"),v("strong",[t._v("解释器可以首先发挥作用")]),t._v("，而不必等待即时编译器全部编译完成再执行，这样可以"),v("strong",[t._v("省去许多不必要的编译时间")]),t._v("。并且随着程序运行时间的推移，即时编译器逐渐发挥作用，根据热点探测功能，"),v("strong",[t._v("将有价值的字节码编译为本地机器指令")]),t._v("，以换取更高的程序执行效率。")])]),t._v(" "),v("h3",{attrs:{id:"案例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),v("p",[t._v("注意解释执行与编译执行在线上环境微妙的辩证关系。机器在热机状态可以承受的负载要大于冷机状态。如果以热机状态时的流量进行切流，可能使处于冷机状态的服务器因无法承载流量而假死。")]),t._v(" "),v("p",[t._v("在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多个批次，每个批次的机器数至多占到整个集群的1/8。")]),t._v(" "),v("p",[t._v("曾经有这样的故障案例：某程序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的JVM均是解释执行，还没有进行热点代码统计和JIT动态编译，导致机器启动之后，当前1/2发布成功的服务器马上全部宕机，此故障说明了JIT的存在。—阿里团队")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091513484.png",alt:"image-20200710095417462"}})]),t._v(" "),v("h3",{attrs:{id:"概念解释"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念解释"}},[t._v("#")]),t._v(" 概念解释")]),t._v(" "),v("ul",[v("li",[t._v('Java 语言的"编译期"其实是一段"不确定"的操作过程，因为它可能是指一个'),v("strong",[t._v("前端编译器")]),t._v('（其实叫"'),v("strong",[t._v("编译器的前端")]),t._v('"更准确一些）把.java文件转变成.class文件的过程；')]),t._v(" "),v("li",[t._v("也可能是指虚拟机的"),v("strong",[t._v("后端运行期编译器")]),t._v("（JIT编译器，Just In Time Compiler）把字节码转变成机器码的过程。")]),t._v(" "),v("li",[t._v("还可能是指使用"),v("strong",[t._v("静态提前编译器")]),t._v("（AOT编译器，Ahead of Time Compiler）直接把.java文件编译成本地机器代码的过程。")])]),t._v(" "),v("blockquote",[v("p",[t._v("前端编译器：Sun的Javac、Eclipse JDT中的增量式编译器（ECJ）。")]),t._v(" "),v("p",[t._v("JIT编译器：HotSpot VM的C1、C2编译器。")]),t._v(" "),v("p",[t._v("AOT 编译器：GNU Compiler for the Java（GCJ）、Excelsior JET。")])]),t._v(" "),v("h3",{attrs:{id:"热点探测技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#热点探测技术"}},[t._v("#")]),t._v(" 热点探测技术")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("概念")]),t._v(" "),v("p",[t._v("当然是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令，则需要根据代码被调用"),v("strong",[t._v("执行的频率")]),t._v("而定。关于那些需要被编译为本地代码的字节码，也被称之为"),v("code",[t._v("热点代码")]),t._v('，JIT编译器在运行时会针对那些频繁被调用的"热点代码"做出'),v("code",[t._v("深度优化")]),t._v("，将其直接编译为对应平台的本地机器指令，以此提升Java程序的执行性能。")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("p",[v("strong",[t._v('一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为"热点代码"')]),t._v("，因此都可以通过JIT编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此被称之为栈上替换，或简称为"),v("code",[t._v("OSR（On Stack Replacement）")]),t._v("编译。")])]),t._v(" "),v("p",[t._v("一个方法究竟"),v("strong",[t._v("要被调用多少次")]),t._v("，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些“热点代码”编译为本地机器指令执行。这里主要依靠"),v("strong",[t._v("热点探测功能")]),t._v("。")]),t._v(" "),v("Badge",{attrs:{text:"目前HotSpot VM所采用的热点探测方式是基于计数器的热点探测。"}}),t._v(" "),v("p",[t._v("采用基于计数器的热点探测，HotSpot JVM将会为每一个方法都建立2个不同类型的计数器，分别为"),v("strong",[t._v("方法调用计数器（Invocation Counter）"),v("strong",[t._v("和")]),t._v("回边计数器（Back Edge Counter）")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("方法调用计数器用于统计方法的调用次数")])]),t._v(" "),v("li",[v("code",[t._v("回边计数器则用于统计循环体执行的循环次数")])])]),t._v(" "),v("h4",{attrs:{id:"方法调用计数器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方法调用计数器"}},[t._v("#")]),t._v(" 方法调用计数器")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("这个计数器就用于统计方法被调用的次数，它的默认阀值在Client模式下是1500次，在Server模式下是10000次。超过这个阈值，就会触发JIT编译。")])]),t._v(" "),v("li",[v("p",[t._v("这个阀值可以通过虚拟机参数 "),v("code",[t._v("-XX:CompileThreshold")]),t._v(" 来人为设定。")])]),t._v(" "),v("li",[v("p",[t._v("当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阀值。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091513105.png",alt:"image-20200710101829934"}})]),t._v(" "),v("h4",{attrs:{id:"热度衰减"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#热度衰减"}},[t._v("#")]),t._v(" 热度衰减")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，")]),t._v(" "),v("p",[t._v("即"),v("strong",[t._v("一段时间之内方法被调用的次数")]),t._v("。当超过"),v("code",[t._v("一定的时间限度")]),t._v("，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被"),v("code",[t._v("减少一半")]),t._v("，这个过程称为方法调用计数器热度的"),v("code",[t._v("衰减（Counter Decay）")]),t._v("，而这段时间就称为此方法统计的"),v("code",[t._v("半衰周期（Counter Half Life Time）")])]),t._v(" "),v("blockquote",[v("p",[t._v("半衰周期是化学中的概念，比如出土的文物通过查看C60来获得文物的年龄")])])]),t._v(" "),v("p",[t._v("进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数\n"),v("code",[t._v("-XX:-UseCounterDecay")]),t._v(" 来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。")]),t._v(" "),v("p",[t._v("另外，可以使用"),v("code",[t._v("-XX:CounterHalfLifeTime")]),t._v("参数设置半衰周期的时间，单位是秒。")]),t._v(" "),v("h4",{attrs:{id:"回边计数器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回边计数器"}},[t._v("#")]),t._v(" 回边计数器")]),t._v(" "),v("blockquote",[v("p",[t._v("它的作用是统计一个方法中"),v("code",[t._v("循环体代码执行的次数")]),t._v('，在字节码中遇到控制流向后跳转的指令称为"回边"（Back Edge）。显然，建立回边计数器统计的目的就是为了触发OSR编译。')])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091513647.png",alt:"image-20200710103103869"}})]),t._v(" "),v("h3",{attrs:{id:"hotspotvm-可以设置程序执行方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hotspotvm-可以设置程序执行方法"}},[t._v("#")]),t._v(" HotSpotVM 可以设置程序执行方法")]),t._v(" "),v("p",[t._v("缺省情况下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为Java虚拟机指定在运行时到底是"),v("strong",[t._v("完全采用解释器")]),t._v("执行，还是"),v("strong",[t._v("完全采用即时编译器")]),t._v("执行。如下所示：")]),t._v(" "),v("Badge",{attrs:{text:"使用 java 下面的命令 -version 就可以切换执行模式"}}),t._v(" "),v("ul",[v("li",[v("code",[t._v("-Xint")]),t._v("：完全采用解释器模式执行程序；")]),t._v(" "),v("li",[v("code",[t._v("-Xcomp")]),t._v("：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行")]),t._v(" "),v("li",[v("code",[t._v("-Xmixed")]),t._v("：采用解释器+即时编译器的混合模式共同执行程序。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/202208091513570.png",alt:"image-20200710103340273"}})]),t._v(" "),v("h3",{attrs:{id:"hotspotvm中-jit-分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hotspotvm中-jit-分类"}},[t._v("#")]),t._v(" HotSpotVM中 JIT 分类")]),t._v(" "),v("p",[t._v("JIT的编译器还分为了两种，分别是"),v("code",[t._v("C1")]),t._v("和"),v("code",[t._v("C2")]),t._v("，在HotSpot VM中内嵌有两个JIT编译器，分别为"),v("code",[t._v("Client Compiler")]),t._v("和"),v("code",[t._v("Server Compiler")]),t._v("，但大多数情况下我们简称为C1编译器 和 C2编译器。开发人员可以通过如下命令显式指定Java虚拟机在运行时到底使用哪一种即时编译器，如下所示：")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("-client")]),t._v("：指定Java虚拟机运行在Client模式下，并使用C1编译器；")]),t._v(" "),v("ul",[v("li",[t._v("C1编译器会对字节码进行"),v("strong",[t._v("简单和可靠的优化，耗时短")]),t._v("。以达到更快的编译速度。")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("-server")]),t._v("：指定Java虚拟机运行在server模式下，并使用C2编译器。")]),t._v(" "),v("ul",[v("li",[t._v("C2进行耗时"),v("strong",[t._v("较长的优化，以及激进优化")]),t._v("。但优化的代码执行效率更高。（使用C++）")])])])]),t._v(" "),v("h3",{attrs:{id:"c1-和-c2编译器不同的优化策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#c1-和-c2编译器不同的优化策略"}},[t._v("#")]),t._v(" C1 和 C2编译器不同的优化策略")]),t._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[t._v("在不同的编译器上有不同的优化策略，C1编译器上主要有方法内联，去虚拟化、元余消除。")]),t._v(" "),v("ul",[v("li",[t._v("方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程")]),t._v(" "),v("li",[t._v("去虚拟化：对唯一的实现樊进行内联")]),t._v(" "),v("li",[t._v("冗余消除：在运行期间把一些不会执行的代码折叠掉")])])]),t._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[t._v("C2的优化主要是在全局层面，逃逸分析是优化的基础。基于逃逸分析在C2上有如下几种优化")]),t._v(" "),v("ul",[v("li",[t._v("标量替换：用标量值代替聚合对象的属性值")]),t._v(" "),v("li",[t._v("栈上分配：对于未逃逸的对象分配对象在栈而不是堆")]),t._v(" "),v("li",[t._v("同步消除：清除同步操作，通常指synchronized")])])]),t._v(" "),v("h3",{attrs:{id:"分层编译策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分层编译策略"}},[t._v("#")]),t._v(" 分层编译策略")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("分层编译（Tiered Compilation）策略")]),t._v(" "),v("p",[t._v("程序解释执行（不开启性能监控）可以触发C1编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2编译会根据性能监控信息进行激进优化。")]),t._v(" "),v("p",[t._v('不过在Java7版本之后，一旦开发人员在程序中显式指定命令“-server"时，默认将会开启分层编译策略，由C1编译器和C2编译器相互协作共同来执行编译任务。')])]),t._v(" "),v("h3",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("ul",[v("li",[t._v("一般来讲，JIT编译出来的机器码性能比解释器高")]),t._v(" "),v("li",[t._v("C2编译器启动时长比C1慢，系统稳定执行以后，C2编译器执行速度远快于C1编译器")])]),t._v(" "),v("h3",{attrs:{id:"graal编译器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#graal编译器"}},[t._v("#")]),t._v(" Graal编译器")]),t._v(" "),v("ul",[v("li",[t._v("自JDK10起，HotSpot又加入一个全新的即时编译器：Graal编译器。")]),t._v(" "),v("li",[t._v("编译效果短短几年时间就追平了C2编译器，未来可期。")]),t._v(" "),v("li",[t._v('目前，带着"实验状态"标签，需要使用开关参数：\n'),v("ul",[v("li",[v("code",[t._v("-XX:+UnlockExperimentalVMOption -XX:+UseJVMCICompiler")]),t._v("去激活，才可以使用。")])])])]),t._v(" "),v("h3",{attrs:{id:"aot编译器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aot编译器"}},[t._v("#")]),t._v(" AOT编译器")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("jdk9引入了AOT编译器（静态提前编译器，Ahead of Time Compiler）")])]),t._v(" "),v("li",[v("p",[t._v("Java 9引入了实验性AOT编译工具jaotc。它借助了Graal编译器，将所输入的Java类文件转换为机器码，并存放至生成的动态共享库之中。")])]),t._v(" "),v("li",[v("p",[t._v("所谓AOT编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在"),v("strong",[t._v("程序的运行过程中")]),t._v("，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在"),v("strong",[t._v("程序运行之前")]),t._v("，便将字节码转换为机器码的过程。")])])]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v(".java -> .class -> (使用jaotc) -> .so\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[t._v('最大的好处：Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少Java应用给人带来"第一次运行慢" 的不良体验')]),t._v(" "),v("p",[t._v("缺点：")]),t._v(" "),v("ul",[v("li",[t._v('破坏了 java  "一次编译，到处运行"，必须为每个不同的硬件、OS 编译对应的发行包')]),t._v(" "),v("li",[v("strong",[t._v("降低了Java链接过程的动态性")]),t._v("，加载的代码在编译器就必须全部已知。")]),t._v(" "),v("li",[t._v("还需要继续优化中，最初只支持Linux X64 java base")])]),t._v(" "),v("h3",{attrs:{id:"写到最后"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#写到最后"}},[t._v("#")]),t._v(" 写到最后")]),t._v(" "),v("ul",[v("li",[t._v("自JDK10起，HotSpot又加入了一个全新的及时编译器：Graal编译器")]),t._v(" "),v("li",[t._v("编译效果短短几年时间就追评了G2编译器，未来可期")]),t._v(" "),v("li",[t._v("目前，带着实验状态标签，需要使用开关参数去激活才能使用")])]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("-XX:+UnlockExperimentalvMOptions -XX:+UseJVMCICompiler\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])])],1)}),[],!1,null,null,null);v.default=s.exports}}]);