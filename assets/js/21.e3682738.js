(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{369:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",[t._v("Table of Contents")]),t._v(" "),s("em",[t._v("generated with "),s("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("DocToc"),s("OutboundLink")],1)])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E6%B3%9B%E5%9E%8B"}},[t._v("泛型")])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),s("ul",[s("li",[t._v("所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参)。")]),t._v(" "),s("li",[t._v("从JDK1.5以后，Java引入了“参数化类型(Parameterized type)”的概念，允许我们在创建集合时再指定集合元素的类型，正如: List< String>，这表明该List只能保存字符串类型的对象。")]),t._v(" "),s("li",[t._v("JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持,从而可以在声明集合变量、创建集合对象时传入类型实参。")])]),t._v(" "),s("p",[s("strong",[t._v("注：")])]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("静态方法中不能使用类的泛型")])]),t._v(" "),s("p",[t._v("因为static结构要早于对象的创建(实例化)，此时对象未创建，泛型是未知的，所以不能使用")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("异常类不能是泛型的")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("父类有泛型，子类可以选择全部保留、或部分保留、也可不保留泛型。也可以选择指定泛型类型")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images.zaiolos.top/images/202201061533654.png",alt:"image-20211101132830551"}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("通配符 ? 的使用")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("对于List<?>就不能向其内部添加数据，除了添加null之外")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("有限制的通配符")])]),t._v(" "),s("ul",[s("li",[t._v("通配符指定上限：上限 extends，使用时指定的类型必须是集成某个类，或者实现某个接口，即<=")]),t._v(" "),s("li",[t._v("通配符下线：下线super，使用时指定的类型不能小于操作的类。即>=")]),t._v(" "),s("li",[t._v("举例\n"),s("ul",[s("li",[t._v("\n<?extends Number> (无穷小,Number]：只允许泛型为Number及Number的子类的引用调用\n")]),t._v(" "),s("li",[t._v("\n<?super Number> [Number,无穷大]：只允许泛型为Number及Number父类的引用调用\n")]),t._v(" "),s("li",[t._v("\n<?extends Comparable>：只允许泛型为实现Comparable接口的实现类的引用调用\n")])])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);