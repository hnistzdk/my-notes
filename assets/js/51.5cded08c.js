(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{399:function(t,v,a){"use strict";a.r(v);var e=a(1),r=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[v("strong",[t._v("Table of Contents")]),t._v(" "),v("em",[t._v("generated with "),v("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("DocToc"),v("OutboundLink")],1)])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88"}},[t._v("本地方法栈")])])]),t._v(" "),v("hr"),t._v(" "),v("h1",{attrs:{id:"本地方法栈"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[t._v("#")]),t._v(" 本地方法栈")]),t._v(" "),v("ul",[v("li",[t._v("Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。")]),t._v(" "),v("li",[t._v("本地方法栈，也是线程私有的")]),t._v(" "),v("li",[t._v("允许被实现成固定或者是可动态扩展的内存大小(在内存溢出方面是相同的)\n"),v("ul",[v("li",[t._v("如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java虚拟机将抛出一个 Stack OverflowError异常")]),t._v(" "),v("li",[t._v("如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么Java虚拟机将会抛出一个 OutOfMemoryError")])])]),t._v(" "),v("li",[t._v("本地方法是使用C语言实现的")]),t._v(" "),v("li",[t._v("它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库")])]),t._v(" "),v("Badge",{attrs:{text:"Hot Spot虚拟机"}}),t._v(" "),v("p",[v("img",{attrs:{src:"https://images.zaiolos.top/images/image-20200706174708418.png",alt:"image-20200706174708418"}})]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限")])]),t._v(" "),v("ul",[v("li",[t._v("本地方法可以通过本地方法接口来"),v("code",[t._v("访问虚拟机内部的运行时数据区")])]),t._v(" "),v("li",[t._v("它甚至可以直接使用本地处理器中的寄存器")]),t._v(" "),v("li",[t._v("直接从本地内存的堆中分配任意数量的内存")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("并不是所有的JVM都支持本地方法。因为Java虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等")]),t._v("。如果JVM产品不打算支持native方法，也可以无需实现本地方法栈。")])]),t._v(" "),v("li",[v("p",[t._v("在Hotspot JVM中，直接将本地方法栈和虚拟机栈合二为一")])])])],1)}),[],!1,null,null,null);v.default=r.exports}}]);