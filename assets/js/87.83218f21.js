(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{435:function(s,t,a){"use strict";a.r(t);var e=a(1),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("strong",[s._v("Table of Contents")]),s._v(" "),t("em",[s._v("generated with "),t("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[s._v("DocToc"),t("OutboundLink")],1)])]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%A6%82%E8%BF%B0"}},[s._v("概述")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1acid%E5%8E%9F%E5%88%99"}},[s._v("事务ACID原则")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1"}},[s._v("Redis如何实现事务？")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#redis%E5%AF%B9acid%E7%9A%84%E6%94%AF%E6%8C%81"}},[s._v("Redis对ACID的支持")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%8E%9F%E5%AD%90%E6%80%A7"}},[s._v("原子性")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#exec%E6%89%A7%E8%A1%8C%E5%89%8D%E6%8A%A5%E9%94%99"}},[s._v("EXEC执行前报错")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#exec%E6%89%A7%E8%A1%8C%E5%90%8E%E6%8A%A5%E9%94%99"}},[s._v("EXEC执行后报错")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#exec%E6%89%A7%E8%A1%8C%E6%97%B6redis%E5%8F%91%E7%94%9F%E6%95%85%E9%9A%9C"}},[s._v("EXEC执行时，Redis发生故障")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[s._v("总结")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%80%E8%87%B4%E6%80%A7"}},[s._v("一致性")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#exec%E6%89%A7%E8%A1%8C%E5%89%8D%E6%8A%A5%E9%94%99-1"}},[s._v("EXEC执行前报错")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#exec%E6%89%A7%E8%A1%8C%E5%90%8E%E6%8A%A5%E9%94%99-1"}},[s._v("EXEC执行后报错")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#exec%E6%89%A7%E8%A1%8C%E6%97%B6redis%E5%8F%91%E7%94%9F%E6%95%85%E9%9A%9C-1"}},[s._v("EXEC执行时，Redis发生故障")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E9%9A%94%E7%A6%BB%E6%80%A7"}},[s._v("隔离性")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#exec%E6%89%A7%E8%A1%8C%E5%89%8D"}},[s._v("EXEC执行前")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#exec%E6%89%A7%E8%A1%8C%E5%90%8E"}},[s._v("EXEC执行后")])])])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%8C%81%E4%B9%85%E6%80%A7"}},[s._v("持久性")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#%E6%80%BB%E7%BB%93-1"}},[s._v("总结")])])])])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),t("blockquote",[t("p",[s._v("事务是"),t("strong",[s._v("数据库操作的最小工作单元")]),s._v("，"),t("strong",[s._v("由一个有限的数据库操作序列构成")]),s._v("。这些操作要么全部执行，要么全部不执行，"),t("strong",[s._v("是一个不可分割的工作单位")]),s._v("。\n事务在执行时，会提供专门的属性保证：原子性、一致性、隔离性和持久性，也就是ACID属性。这些属性包括了对执行结果的要求，同时也有对数据库在事务执行前后数据状态变化的要求。")])]),s._v(" "),t("p",[s._v("既然事务是数据库特有的机制，那么Redis可以完全保证ACID属性吗？如果有些属性在一些场景下不能保证，很可能会造成数据错误，我们又该如何应对呢？")]),s._v(" "),t("p",[s._v("先从 ACID 属性入手，然后再来看 Redis 是如何实现事务的。")]),s._v(" "),t("h2",{attrs:{id:"事务acid原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务acid原则"}},[s._v("#")]),s._v(" 事务ACID原则")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("原子性（Atomicity）")]),s._v("：事务作为一个整体被执行，包含在其中的多个的操作要么全部被执行，要么都不执行。这也是业务应用事务时，最被看重的一个属性。")]),s._v(" "),t("li",[t("strong",[s._v("一致性（Consistency）")]),s._v("： 就是指数据库中的数据在事务执行前后是一致的。最典型的就是转账的例子。不管用户之间转几次帐，如何转账，事务结束后两个用户钱的总额是不变的。")]),s._v(" "),t("li",[t("strong",[s._v("隔离性（Isolation）")]),s._v("：与事务并发直接相关，隔离性是指并发执行的事务之间不能相互影响。简单说，对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始。这样每个事务都感觉不到有其他事务在并发地执行。")]),s._v(" "),t("li",[t("strong",[s._v("持久性（Durability）")]),s._v("：事务一旦提交，所有对数据库数据的修改将永久的保存，即使系统崩溃重启后数据也不会丢失。")])]),s._v(" "),t("h2",{attrs:{id:"redis如何实现事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis如何实现事务"}},[s._v("#")]),s._v(" Redis如何实现事务？")]),s._v(" "),t("p",[s._v("Redis 提供了"),t("code",[s._v("MULTI")]),s._v("、"),t("code",[s._v("EXEC")]),s._v("、"),t("code",[s._v("DISCARD")]),s._v(" 和 "),t("code",[s._v("WATCH")]),s._v(" 命令作为实现事务的的基础。")]),s._v(" "),t("p",[s._v("Redis 事务的执行过程包含三个步骤：")]),s._v(" "),t("ol",[t("li",[s._v("开启事务：客户端通过"),t("code",[s._v("MULTI")]),s._v("命令，显式地开启一个事务；")]),s._v(" "),t("li",[s._v("命令入队：客户端把事务中要执行的一系列指令发送给服务器端，如GET、SET 等。需要注意，这些指令只是暂存到命令队列中，并不会立即执行；")]),s._v(" "),t("li",[s._v("提交事务，执行第二步提交的命令：客户端向服务器端发送提交事务的命令 "),t("code",[s._v("EXEC")]),s._v("，当服务端收到 "),t("code",[s._v("EXEC")]),s._v("命令后，才会实际执行命令队列中的所有命令。")])]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("MULTI")]),s._v(" 和 "),t("code",[s._v("EXEC")]),s._v(" 执行一个事务的过程：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置a:stock为10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" SET a:stock "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\nOK\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置b:stock为20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" SET b:stock "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\nOK\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开启事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" MULTI\nOK\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#将a:stock减1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" DECR a:stock\nQUEUED\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#将b:stock减1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" DECR b:stock\nQUEUED\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#实际执行事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" EXEC\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("我们看到执行"),t("code",[s._v("DECR")]),s._v("的时候返回的都是 QUEUED，表示这些操作都被暂存到了命令队列，还没有实际执行。")]),s._v(" "),t("p",[s._v("等执行了 "),t("code",[s._v("EXEC")]),s._v(" 命令，就可以看到具体每个指令的响应数据。")]),s._v(" "),t("p",[s._v("我们看到 Redis 可以实现多个操作共同执行，接下来我们看看 Redis的事务机制可以支持哪些ACID属性。")]),s._v(" "),t("h2",{attrs:{id:"redis对acid的支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis对acid的支持"}},[s._v("#")]),s._v(" Redis对ACID的支持")]),s._v(" "),t("h3",{attrs:{id:"原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[s._v("#")]),s._v(" 原子性")]),s._v(" "),t("blockquote",[t("p",[s._v("正常情况下，没有发生任何错误，使用"),t("code",[s._v("MULTI")]),s._v(" 和 "),t("code",[s._v("EXEC")]),s._v("命令，可以保证多个操作的正常执行。但是，如果事务执行发生错误了，还能保证原子性吗？")])]),s._v(" "),t("p",[s._v("这里有三种情况")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("在执行 EXEC 命令前")]),s._v("，客户端发送的操作命令本身就有错误，比如：语法错误，使用了不存在的命令；")]),s._v(" "),t("li",[t("strong",[s._v("执行完 EXEC 命令后")]),s._v("，Redis 实际执行这些事务操作时报错，比如：命令和操作的数据类型不匹配（"),t("strong",[s._v("对 String 类型 的 value 执行了 List 列表操作")]),s._v("）")]),s._v(" "),t("li",[t("strong",[s._v("执行 EXEC命令的时候")]),s._v("，Redis 实例发生了故障，导致事务执行失败。")])]),s._v(" "),t("h4",{attrs:{id:"exec执行前报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec执行前报错"}},[s._v("#")]),s._v(" EXEC执行前报错")]),s._v(" "),t("p",[s._v("对于这种情况，"),t("strong",[s._v("在命令入队时，Redis 就会报错并且记录下这个错误")]),s._v("。")]),s._v(" "),t("p",[s._v("此时，"),t("strong",[s._v("我们还能继续提交命令操作")]),s._v("。等到执行了 "),t("code",[s._v("EXEC")]),s._v(" 命令之后，Redis 就会"),t("strong",[s._v("拒绝执行所有提交的命令操作，返回事务失败的结果")]),s._v("。")]),s._v(" "),t("p",[s._v("这样一来，"),t("strong",[s._v("事务中的所有命令都不会再被执行了，保证了原子性。")])]),s._v(" "),t("p",[s._v("一个因为命令入队时发生错误，导致事务失败的例子。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开启事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" MULTI\nOK\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#发送事务中的第一个操作，但是Redis不支持该命令，返回报错信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" PUT a:stock "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ERR unknown "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'PUT'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#发送事务中的第二个操作，这个是正确的命令，Redis把该命令入队")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" DECR b:stock\nQUEUED\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#实际执行事务，但是之前命令有错误，所以Redis拒绝执行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" EXEC\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" EXECABORT Transaction discarded because of previous errors.\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h4",{attrs:{id:"exec执行后报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec执行后报错"}},[s._v("#")]),s._v(" EXEC执行后报错")]),s._v(" "),t("p",[s._v("和第一种情况不同的是，"),t("strong",[s._v("命令和操作的数据类型不匹配的错误，在事务操作入队时是检查不出来的。")]),s._v(" 只能是在执行完 "),t("code",[s._v("EXEC")]),s._v(" 命令以后，Redis 实际执行这些事务操作时，会报错。")]),s._v(" "),t("p",[s._v("需要注意的是，"),t("strong",[s._v("虽然 Redis 会对错误命令报错，但还是会把正确的命令执行完")]),s._v("，在这种情况下，事务的原子性就无法得到保证了。")]),s._v(" "),t("p",[s._v("命令和操作的数据类型不匹配例子：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开启事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" MULTI\nOK\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#发送事务中的第一个操作，LPOP命令操作的数据类型不匹配，此时并不报错(a:stock是String类型)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" LPOP a:stock\nQUEUED\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#发送事务中的第二个操作")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" DECR b:stock\nQUEUED\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#实际执行事务，事务第一个操作执行报错，第二个操作正常执行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" EXEC\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" WRONGTYPE Operation against a key holding the wrong kind of value\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("上述事务中的 "),t("code",[s._v("LPOP")]),s._v(" 命令对 "),t("code",[s._v("String")]),s._v(" 类型数据进行操作，在入队时没有报错，但是，在 "),t("code",[s._v("EXEC")]),s._v(" 执行时报错了。最后，"),t("code",[s._v("LPOP")]),s._v(" 命令本身没有执行成功，但是事务中的 "),t("code",[s._v("DECR")]),s._v(" 命令却成功执行了。")]),s._v(" "),t("p",[s._v("我们可能会想到MySQL中的事务回滚机制，但Redis 中是不具备回滚机制的，Redis 只提供了一个 "),t("code",[s._v("DISCARD")]),s._v(" 命令，这个命令"),t("strong",[s._v("只能主动的放弃执行事务，把暂存的命令队列清空，起不到回滚的效果。")])]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("DISCARD")]),s._v(" 命令实现放弃事务：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#读取a:stock的值9")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GET a:stock\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"9"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开启事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" MULTI\nOK\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#发送事务的第一个操作，对a:stock减1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" DECR a:stock\nQUEUED\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#执行DISCARD命令，主动放弃事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" DISCARD\nOK\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#再次读取a:stock的值，值没有被修改")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" GET a:stock\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"9"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h4",{attrs:{id:"exec执行时-redis发生故障"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec执行时-redis发生故障"}},[s._v("#")]),s._v(" EXEC执行时，Redis发生故障")]),s._v(" "),t("blockquote",[t("p",[s._v("在这种情况下，如果 Redis 开启了 AOF 日志，那么，会有部分的事务操作被记录到 AOF 日志中。\n我们需要使用 "),t("code",[s._v("redis-check-aof")]),s._v(" 工具检查 AOF 日志文件，这个工具可以把未完成的事务操作从 AOF 文件中去除。\n这样一来，我们使用 AOF 恢复实例后，这些事务操作将不会再被执行，从而保证了原子性。\n如果 AOF 日志并没有开启，那么实例重启后，数据也都没法恢复了，此时，就也就谈不上原子性了。")])]),s._v(" "),t("h4",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("ol",[t("li",[s._v("命令入队时就报错，会放弃所有事务执行，保证原子性；")]),s._v(" "),t("li",[s._v("命令入队时没报错，实际执行时报错，不保证原子性；")]),s._v(" "),t("li",[t("code",[s._v("EXEC")]),s._v(" 命令执行时实例故障，如果开启了 AOF 日志，可以保证原子性。")])]),s._v(" "),t("h3",{attrs:{id:"一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一致性"}},[s._v("#")]),s._v(" 一致性")]),s._v(" "),t("h4",{attrs:{id:"exec执行前报错-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec执行前报错-2"}},[s._v("#")]),s._v(" EXEC执行前报错")]),s._v(" "),t("blockquote",[t("p",[s._v("在这种情况下，事务本身就会被放弃执行，所以可以保证数据库的一致性。")])]),s._v(" "),t("h4",{attrs:{id:"exec执行后报错-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec执行后报错-2"}},[s._v("#")]),s._v(" EXEC执行后报错")]),s._v(" "),t("blockquote",[t("p",[s._v("在这种情况下，由于报错的命令并没有去执行，只是执行了正确的命令。这种情况下，也是可以保证数据库的一致性的。")])]),s._v(" "),t("h4",{attrs:{id:"exec执行时-redis发生故障-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec执行时-redis发生故障-2"}},[s._v("#")]),s._v(" EXEC执行时，Redis发生故障")]),s._v(" "),t("p",[s._v("这种情况下，由于 Redis 实例故障，所以会有重启，这就和数据恢复的方式有关了。")]),s._v(" "),t("p",[s._v("下面，我们根据 Redis 实例是否开启 RDB 或 AOF 来分情况讨论下。")]),s._v(" "),t("ul",[t("li",[s._v("首先，我们没有开启 RDB 或 AOF，实例重启之后，数据就没有了，此时数据库是一致的。")]),s._v(" "),t("li",[s._v("如果我们用了 RDB快照，由于 在事务执行的时候，是不会进行 RDB 快照的，所以，如果Redis实例故障，事务操作的命令是不会记录到 RDB 快照的，所以和上面一样，实例重启之后，数据库是一致的。")]),s._v(" "),t("li",[s._v("如果我们使用了 AOF 日志，当事务操作还没有被记录到 AOF 日志时，实例就发生了故障，那么，使用 AOF 日志恢复的数据库数据是一致的。")]),s._v(" "),t("li",[s._v("如果只有部分操作被记录到了 AOF 日志，我们可以使用 "),t("code",[s._v("redis-check-aof")]),s._v(" 清除事务中已经完成的操作，数据库恢复后也是一致的。")])]),s._v(" "),t("p",[s._v("所以，综上，"),t("strong",[s._v("Redis 事务机制对一致性属性是有保证的")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"隔离性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隔离性"}},[s._v("#")]),s._v(" 隔离性")]),s._v(" "),t("blockquote",[t("p",[s._v("事务的隔离性，会受到并发操作的影响。在事务执行时，分为命令入队（"),t("code",[s._v("EXEC")]),s._v(" 命令执行前）和命令实际执行（"),t("code",[s._v("EXEC")]),s._v(" 命令执行后）两个阶段。")])]),s._v(" "),t("h4",{attrs:{id:"exec执行前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec执行前"}},[s._v("#")]),s._v(" EXEC执行前")]),s._v(" "),t("p",[s._v("一个事务，在"),t("code",[s._v("EXEC")]),s._v(" 命令执行前，该事务的命令操作是暂存在命令队列中的。此时，如果有其它的并发操作，我们就需要看事务是否使用了 "),t("code",[s._v("WATCH")]),s._v(" 机制。\n"),t("code",[s._v("WATCH")]),s._v(" 机制的作用是，"),t("strong",[s._v("在事务执行前，监控一个或多个键的值变化情况")]),s._v("。")]),s._v(" "),t("p",[s._v("当事务调用 "),t("code",[s._v("EXEC")]),s._v(" 命令执行时，"),t("code",[s._v("WATCH")]),s._v(" 机制会先检查监控的键是否被其它客户端修改了。")]),s._v(" "),t("p",[s._v("如果修改了，就放弃事务执行，避免事务的隔离性被破坏。然后，客户端可以再次执行事务，此时，如果没有并发修改事务数据的操作了，事务就能正常执行，隔离性也得到了保证。")]),s._v(" "),t("p",[t("code",[s._v("WATCH")]),s._v(" 机制是由"),t("code",[s._v("WATCH")]),s._v(" 命令实现，如下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/202208031100604.png",alt:"image.png"}})]),s._v(" "),t("p",[s._v("我们看到因为 "),t("code",[s._v("WATCH")]),s._v(" 机制，最后执行 EXEC 的时候，发现 "),t("code",[s._v("a:stock")]),s._v(" 已经被修改了，放弃了事务的执行，这样一来就保证了隔离性。")]),s._v(" "),t("p",[s._v("如果不使用 "),t("code",[s._v("WATCH")]),s._v(" 机制，在最后执行 EXEC 的时候，不管 "),t("code",[s._v("a:stock")]),s._v(" 是否已经被修改，都不会放弃事务的执行，隔离性也就没有得到保障。如下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.zaiolos.top/images/202208031100158.png",alt:"image.png"}})]),s._v(" "),t("h4",{attrs:{id:"exec执行后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec执行后"}},[s._v("#")]),s._v(" EXEC执行后")]),s._v(" "),t("blockquote",[t("p",[s._v("第二种情况：并发操作在 "),t("code",[s._v("EXEC")]),s._v(" 命令执行之后被服务器端接收并执行")]),s._v(" "),t("p",[s._v("因为 Redis 是用单线程执行命令，而且，"),t("code",[s._v("EXEC")]),s._v(" 命令执行后，Redis 会保证先把命令队列中的所有命令执行完。所以，在这种情况下，并发操作不会破坏事务的隔离性。")])]),s._v(" "),t("h3",{attrs:{id:"持久性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持久性"}},[s._v("#")]),s._v(" 持久性")]),s._v(" "),t("p",[s._v("因为 Redis 是内存数据库，所以，数据是否持久化保存完全取决于 Redis 的持久化配置。")]),s._v(" "),t("ul",[t("li",[s._v("如果 Redis 没有使用 RDB 或 AOF，那么事务的持久化属性肯定得不到保证。")]),s._v(" "),t("li",[s._v("如果 Redis 使用了 RDB 模式，那么，在一个事务执行后，下一次的 RDB 快照还未执行前，发生了实例宕机，这种情况下，事务修改的数据也是不能保证持久化的。")]),s._v(" "),t("li",[s._v("如果 Redis 采用了 AOF 模式，因为 AOF 模式的三种配置选项 "),t("code",[s._v("no")]),s._v("、"),t("code",[s._v("everysec")]),s._v(" 和 "),t("code",[s._v("always")]),s._v(" 都会存在数据丢失的情况，所以，事务的持久性属性也还是得不到保证。")])]),s._v(" "),t("p",[t("strong",[s._v("所以，不管 Redis 采用什么持久化模式，事务的持久性属性是得不到保证的")])]),s._v(" "),t("h3",{attrs:{id:"总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("ul",[t("li",[s._v("Redis 事务支持部分的原子性：如果事务中使用的命令和操作的数据类型不匹配的时候不保证原子性")]),s._v(" "),t("li",[s._v("Redis 事务支持一致性")]),s._v(" "),t("li",[s._v("Redis 事务支持隔离性")]),s._v(" "),t("li",[s._v("Redis 无法保证持久性")])])])}),[],!1,null,null,null);t.default=r.exports}}]);